/* IDLParser.java */
/* Generated By:JavaCC: Do not edit this line. IDLParser.java */
package gov.redhawk.eclipsecorba.idl.internal.parser;

import java.io.*;
import java.util.*;
import gov.redhawk.eclipsecorba.idl.*;
import gov.redhawk.eclipsecorba.idl.expressions.*;
import gov.redhawk.eclipsecorba.idl.types.*;
import gov.redhawk.eclipsecorba.idl.types.Enumeration;
import gov.redhawk.eclipsecorba.idl.operations.*;
import org.eclipse.emf.ecore.resource.Resource;

public class IDLParser implements IDLParserConstants {

	private Resource resource;

	private Scope root;

	public static Specification parse(InputStream in, String encoding, Resource resource, Scope rootScope) throws ParseException {
		IDLParser parser = new IDLParser(in, encoding);
		parser.resource = resource;
		parser.root = rootScope;
		return parser.idlFile();
	}

	public static Specification parse(InputStream in, Resource resource, Scope rootScope) throws ParseException {
		return parse(in, null, resource, rootScope);
	}

	public static Specification parse(File file, String encoding, Resource resource, Scope rootScope) throws ParseException {
		try {
			FileInputStream in = new FileInputStream(file);
			try {
				return parse(in, encoding, resource, rootScope);
			} finally {
				in.close();
			}
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
	}

	public static Specification parse(File file, Resource resource, Scope rootScope) throws ParseException {
		return parse(file, null, resource, rootScope);
	}

	private BlockComment popComment() {
		return token_source.popComment();
	}

	List<Comment> getComments() {
		return token_source.getComments();
	}

	Resource getResource() {
		return resource;
	}

	String getPrefix() {
		return token_source.getPrefix();
	}

	final public Specification idlFile() throws ParseException {
		Specification retVal = null;
		switch (jj_nt.kind) {
		case ABSTRACT:
		case EXCEPTION:
		case INTERFACE:
		case TYPEDEF:
		case ENUM:
		case LOCAL:
		case TYPEID:
		case EVENTTYPE:
		case TYPEPREFIX:
		case MODULE:
		case UNION:
		case COMPONENT:
		case NATIVE:
		case CONST:
		case VALUETYPE:
		case STRUCT:
		case CUSTOM:
		case HOME: {
			retVal = specification();
			break;
		}
		default:
			jj_la1[0] = jj_gen;
			;
		}
		jj_consume_token(0);
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 1 */
	final public Specification specification() throws ParseException {
		Specification spec = IdlFactory.eINSTANCE.createSpecification();
		List< ? extends Definition> defs = null;
		int startLine = 0;
		int startColumn = 0;
		int endLine = 0;
		int endColumn = 0;
		token_source.setCurrentScope(root);
		label_1: while (true) {
			defs = definition(root);
			spec.getDefinitions().addAll(defs);
			switch (jj_nt.kind) {
			case ABSTRACT:
			case EXCEPTION:
			case INTERFACE:
			case TYPEDEF:
			case ENUM:
			case LOCAL:
			case TYPEID:
			case EVENTTYPE:
			case TYPEPREFIX:
			case MODULE:
			case UNION:
			case COMPONENT:
			case NATIVE:
			case CONST:
			case VALUETYPE:
			case STRUCT:
			case CUSTOM:
			case HOME: {
				;
				break;
			}
			default:
				jj_la1[1] = jj_gen;
				break label_1;
			}
		}
		jj_consume_token(0);
		endLine = token.endLine;
		endColumn = token.endColumn;
		spec.setStartLine(startLine);
		spec.setStartColumn(startColumn);
		spec.setEndLine(endLine);
		spec.setEndColumn(endColumn);
		spec.setName(resource.getURI().lastSegment());
		spec.setPrefix(getPrefix());
		{
			if ("" != null)
				return spec;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 2 */
	final public List< ? extends Definition> definition(Scope scope) throws ParseException {
		List< ? extends Definition> retVal = null;
		Definition def = null;
		switch (jj_nt.kind) {
		case TYPEDEF:
		case ENUM:
		case UNION:
		case NATIVE:
		case STRUCT: {
			retVal = type_dcl(scope);
			jj_consume_token(76);
			break;
		}
		case CONST: {
			def = const_dcl(scope);
			jj_consume_token(76);
			break;
		}
		case EXCEPTION: {
			def = except_dcl(scope);
			jj_consume_token(76);
			break;
		}
		default:
			jj_la1[3] = jj_gen;
			if (jj_2_2(2)) {
				def = interfacex(scope);
				jj_consume_token(76);
			} else {
				switch (jj_nt.kind) {
				case ABSTRACT:
				case EVENTTYPE:
				case VALUETYPE:
				case CUSTOM: {
					if (jj_2_1(2147483647)) {
						def = value(scope);
						jj_consume_token(76);
					} else {
						switch (jj_nt.kind) {
						case ABSTRACT:
						case EVENTTYPE:
						case CUSTOM: {
							def = event(scope);
							jj_consume_token(76);
							break;
						}
						default:
							jj_la1[2] = jj_gen;
							jj_consume_token(-1);
							throw new ParseException();
						}
					}
					break;
				}
				case MODULE: {
					def = module(scope);
					jj_consume_token(76);
					break;
				}
				case TYPEID: {
					def = type_id_dcl(scope);
					jj_consume_token(76);
					break;
				}
				case TYPEPREFIX: {
					def = type_prefix_dcl(scope);
					jj_consume_token(76);
					break;
				}
				case COMPONENT: {
					def = component(scope);
					jj_consume_token(76);
					break;
				}
				case HOME: {
					def = home_dcl(scope);
					jj_consume_token(76);
					break;
				}
				default:
					jj_la1[4] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
				}
			}
		}
		if (retVal == null && def != null) {
			retVal = Collections.singletonList(def);
		}
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 3 */
	final public Module module(Scope scope) throws ParseException {
		Module module = IdlFactory.eINSTANCE.createModule();
		Scope moduleScope = null;
		List< ? extends Definition> defs = null;
		int startLine = 0;
		int startColumn = 0;
		int endLine = 0;
		int endColumn = 0;
		Comment comment = popComment();
		jj_consume_token(MODULE);
		startLine = token.beginLine;
		startColumn = token.beginColumn;
		identifiableElement(module);
		Identifiable tmp = scope.findIdentifiableNull(module.getName());
		if (tmp instanceof Module) {
			moduleScope = scope.getScope(tmp);
		} else {
			moduleScope = new Scope(module, scope, token);
		}
		token_source.setCurrentScope(moduleScope);
		jj_consume_token(77);
		label_2: while (true) {
			defs = definition(moduleScope);
			module.getDefinitions().addAll(defs);
			switch (jj_nt.kind) {
			case ABSTRACT:
			case EXCEPTION:
			case INTERFACE:
			case TYPEDEF:
			case ENUM:
			case LOCAL:
			case TYPEID:
			case EVENTTYPE:
			case TYPEPREFIX:
			case MODULE:
			case UNION:
			case COMPONENT:
			case NATIVE:
			case CONST:
			case VALUETYPE:
			case STRUCT:
			case CUSTOM:
			case HOME: {
				;
				break;
			}
			default:
				jj_la1[5] = jj_gen;
				break label_2;
			}
		}
		jj_consume_token(78);
		endLine = token.endLine;
		endColumn = token.endColumn;
		module.setStartLine(startLine);
		module.setStartColumn(startColumn);
		module.setEndLine(endLine);
		module.setEndColumn(endColumn);
		module.setPrefix(getPrefix());
		module.setComment(comment);
		token_source.setCurrentScope(scope);
		{
			if ("" != null)
				return module;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 4 */
	final public IdlTypeDcl interfacex(Scope parent) throws ParseException {
		IdlTypeDcl retVal = null;
		if (jj_2_3(4)) {
			retVal = interface_dcl(parent);
		} else {
			switch (jj_nt.kind) {
			case ABSTRACT:
			case INTERFACE:
			case LOCAL: {
				retVal = forward_dcl(parent);
				break;
			}
			default:
				jj_la1[6] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 5 */
	final public IdlInterfaceDcl interface_dcl(Scope parent) throws ParseException {
		IdlInterfaceDcl retVal = null;
		Scope myScope = null;
		int endLine = 0;
		int endColumn = 0;
		Comment comment = popComment();
		retVal = interface_header(parent);
		IdlInterfaceDcl type = parent.findInterfaceDclStub(retVal.getName());
		if (type != null) {
			IdlInterfaceDcl tmp = (IdlInterfaceDcl) type;
			tmp.getInheritedInterfaces().addAll(retVal.getInheritedInterfaces());
			tmp.setStartLine(retVal.getStartLine());
			tmp.setStartColumn(retVal.getStartColumn());
			retVal = tmp;
			myScope = parent.getScope(retVal);
		} else {
			myScope = new Scope(retVal, parent, token);
		}
		jj_consume_token(77);
		interface_body(retVal, myScope);
		jj_consume_token(78);
		endLine = token.endLine;
		endColumn = token.endColumn;
		retVal.setEndLine(endLine);
		retVal.setEndColumn(endColumn);
		retVal.setComment(comment);
		retVal.setPrefix(getPrefix());
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 6 */
	final public ForwardDcl forward_dcl(Scope parent) throws ParseException {
		ForwardDcl retVal = IdlFactory.eINSTANCE.createForwardDcl();
		int startLine = 0;
		int startColumn = 0;
		int endLine = 0;
		int endColumn = 0;
		Comment comment = popComment();
		switch (jj_nt.kind) {
		case ABSTRACT:
		case LOCAL: {
			switch (jj_nt.kind) {
			case ABSTRACT: {
				jj_consume_token(ABSTRACT);
				retVal.setAbstract(true);
				break;
			}
			case LOCAL: {
				jj_consume_token(LOCAL);
				retVal.setLocal(true);
				break;
			}
			default:
				jj_la1[7] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
			break;
		}
		default:
			jj_la1[8] = jj_gen;
			;
		}
		jj_consume_token(INTERFACE);
		startLine = token.beginLine;
		startColumn = token.beginColumn;
		identifiableElement(retVal);
		endLine = token.endLine;
		endColumn = token.endColumn;
		retVal.setStartLine(startLine);
		retVal.setStartColumn(startColumn);
		retVal.setEndLine(endLine);
		retVal.setEndColumn(endColumn);
		// Multiple forward declarations are allowed per [OMGIDL35] section 5.8.4
		// We also allow forward declarations after an actual declaration
		IdlInterfaceDcl interfaceStub = parent.findInterfaceDclStub(retVal.getName());
		if (interfaceStub == null) {
			interfaceStub = IdlFactory.eINSTANCE.createIdlInterfaceDcl();
			interfaceStub.setName(retVal.getName());
			interfaceStub.setForwardDcl(retVal);
			parent.addScope(interfaceStub, token);
		}
		retVal.setImplementation(interfaceStub);
		retVal.setComment(comment);
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 7 */
	final public IdlInterfaceDcl interface_header(Scope scope) throws ParseException {
		IdlInterfaceDcl retVal = IdlFactory.eINSTANCE.createIdlInterfaceDcl();
		List<IdlInterfaceDcl> inherits = null;
		int startLine = 1;
		int startColumn = 0;
		switch (jj_nt.kind) {
		case ABSTRACT:
		case LOCAL: {
			switch (jj_nt.kind) {
			case ABSTRACT: {
				jj_consume_token(ABSTRACT);
				retVal.setAbstract(true);
				break;
			}
			case LOCAL: {
				jj_consume_token(LOCAL);
				retVal.setLocal(true);
				break;
			}
			default:
				jj_la1[9] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
			break;
		}
		default:
			jj_la1[10] = jj_gen;
			;
		}
		jj_consume_token(INTERFACE);
		startLine = token.beginLine;
		startColumn = token.beginColumn;
		identifiableElement(retVal);
		switch (jj_nt.kind) {
		case 79: {
			inherits = inheritance_spec(scope);
			retVal.getInheritedInterfaces().addAll(inherits);
			break;
		}
		default:
			jj_la1[11] = jj_gen;
			;
		}
		retVal.setStartLine(startLine);
		retVal.setStartColumn(startColumn);
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 8 */
	final public void interface_body(IdlInterfaceDcl val, Scope scope) throws ParseException {
		List< ? extends Element> elements = null;
		label_3: while (true) {
			switch (jj_nt.kind) {
			case EXCEPTION:
			case ANY:
			case TYPEDEF:
			case ATTRIBUTE:
			case ENUM:
			case TYPEID:
			case BOOLEAN:
			case LONG:
			case TYPEPREFIX:
			case READONLY:
			case UNSIGNED:
			case CHAR:
			case UNION:
			case NATIVE:
			case CONST:
			case SHORT:
			case VALUE_BASE:
			case FLOAT:
			case OCTET:
			case IDL_STRING:
			case ONEWAY:
			case STRUCT:
			case VOID:
			case WCHAR:
			case DOUBLE:
			case OBJECT:
			case 81:
			case ID: {
				;
				break;
			}
			default:
				jj_la1[12] = jj_gen;
				break label_3;
			}
			elements = export(scope);
			for (Element e : elements) {
				if (e instanceof Export) {
					val.getBody().add((Export) e);
				} else if (e instanceof Definition) {
					val.getDefinitions().add((Definition) e);
				}
			}
		}
	}

	/* Production 9 */
	final public List< ? extends Element> export(Scope scope) throws ParseException {
		List< ? extends Element> retVal = null;
		Element element = null;
		switch (jj_nt.kind) {
		case TYPEDEF:
		case ENUM:
		case UNION:
		case NATIVE:
		case STRUCT: {
			retVal = type_dcl(scope);
			jj_consume_token(76);
			break;
		}
		case CONST: {
			element = const_dcl(scope);
			jj_consume_token(76);
			break;
		}
		case EXCEPTION: {
			element = except_dcl(scope);
			jj_consume_token(76);
			break;
		}
		case ATTRIBUTE:
		case READONLY: {
			retVal = attr_dcl(scope);
			jj_consume_token(76);
			break;
		}
		case ANY:
		case BOOLEAN:
		case LONG:
		case UNSIGNED:
		case CHAR:
		case SHORT:
		case VALUE_BASE:
		case FLOAT:
		case OCTET:
		case IDL_STRING:
		case ONEWAY:
		case VOID:
		case WCHAR:
		case DOUBLE:
		case OBJECT:
		case 81:
		case ID: {
			element = op_dcl(scope);
			jj_consume_token(76);
			break;
		}
		case TYPEID: {
			element = type_id_dcl(scope);
			jj_consume_token(76);
			break;
		}
		case TYPEPREFIX: {
			element = type_prefix_dcl(scope);
			jj_consume_token(76);
			break;
		}
		default:
			jj_la1[13] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		if (retVal == null) {
			retVal = Collections.singletonList(element);
		}
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 10 */
	final public List<IdlInterfaceDcl> inheritance_spec(Scope scope) throws ParseException {
		String scopedName = null;
		List<IdlInterfaceDcl> retVal = new ArrayList<IdlInterfaceDcl>();
		jj_consume_token(79);
		scopedName = interface_name();
		retVal.add((IdlInterfaceDcl) scope.findType(scopedName, token));
		label_4: while (true) {
			switch (jj_nt.kind) {
			case 80: {
				;
				break;
			}
			default:
				jj_la1[14] = jj_gen;
				break label_4;
			}
			jj_consume_token(80);
			scopedName = interface_name();
			retVal.add((IdlInterfaceDcl) scope.findType(scopedName, token));
		}
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 11 */
	final public String interface_name() throws ParseException {
		String retVal = null;
		retVal = scoped_name();
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 12 */
	final public String scoped_name() throws ParseException {
		StringBuilder builder = new StringBuilder();
		String id = null;
		switch (jj_nt.kind) {
		case 81: {
			jj_consume_token(81);
			builder.append("::");
			break;
		}
		default:
			jj_la1[15] = jj_gen;
			;
		}
		id = identifier();
		builder.append(id);
		label_5: while (true) {
			switch (jj_nt.kind) {
			case 81: {
				;
				break;
			}
			default:
				jj_la1[16] = jj_gen;
				break label_5;
			}
			jj_consume_token(81);
			builder.append("::");
			id = identifier();
			builder.append(id);
		}
		{
			if ("" != null)
				return builder.toString();
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 13 */
	final public Definition value(Scope scope) throws ParseException {
		Definition retVal = null;
		if (jj_2_6(3)) {
			if (jj_2_4(3)) {
				retVal = value_dcl(scope);
			} else {
				switch (jj_nt.kind) {
				case ABSTRACT: {
					retVal = value_abs_dcl(scope);
					break;
				}
				default:
					jj_la1[17] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
				}
			}
		} else {
			switch (jj_nt.kind) {
			case ABSTRACT:
			case VALUETYPE: {
				if (jj_2_5(3)) {
					retVal = value_box_dcl(scope);
				} else {
					switch (jj_nt.kind) {
					case ABSTRACT:
					case VALUETYPE: {
						retVal = value_forward_dcl();
						break;
					}
					default:
						jj_la1[18] = jj_gen;
						jj_consume_token(-1);
						throw new ParseException();
					}
				}
				break;
			}
			default:
				jj_la1[19] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 14 */
	final public ValueForwardDcl value_forward_dcl() throws ParseException {
		ValueForwardDcl retVal = null;
		switch (jj_nt.kind) {
		case ABSTRACT: {
			jj_consume_token(ABSTRACT);
			break;
		}
		default:
			jj_la1[20] = jj_gen;
			;
		}
		jj_consume_token(VALUETYPE);
		identifier();
		{
			if (true)
				throw new UnsupportedOperationException();
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 15 */
	final public ValueBoxDcl value_box_dcl(Scope scope) throws ParseException {
		ValueBoxDcl retVal = IdlFactory.eINSTANCE.createValueBoxDcl();
		IdlType typeSpec = null;
		Comment comment = popComment();
		jj_consume_token(VALUETYPE);
		retVal.setStartLine(token.beginLine);
		retVal.setStartColumn(token.beginColumn);
		identifiableElement(retVal);
		typeSpec = type_spec(scope);
		retVal.setTypeSpec(typeSpec);
		retVal.setComment(comment);
		retVal.setEndLine(token.endLine);
		retVal.setEndColumn(token.endColumn);
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 16 */
	final public Definition value_abs_dcl(Scope scope) throws ParseException {
		jj_consume_token(ABSTRACT);
		jj_consume_token(VALUETYPE);
		identifier();
		switch (jj_nt.kind) {
		case 79: {
			value_inheritance_spec(scope);
			break;
		}
		default:
			jj_la1[21] = jj_gen;
			;
		}
		jj_consume_token(77);
		label_6: while (true) {
			switch (jj_nt.kind) {
			case EXCEPTION:
			case ANY:
			case TYPEDEF:
			case ATTRIBUTE:
			case ENUM:
			case TYPEID:
			case BOOLEAN:
			case LONG:
			case TYPEPREFIX:
			case READONLY:
			case UNSIGNED:
			case CHAR:
			case UNION:
			case NATIVE:
			case CONST:
			case SHORT:
			case VALUE_BASE:
			case FLOAT:
			case OCTET:
			case IDL_STRING:
			case ONEWAY:
			case STRUCT:
			case VOID:
			case WCHAR:
			case DOUBLE:
			case OBJECT:
			case 81:
			case ID: {
				;
				break;
			}
			default:
				jj_la1[22] = jj_gen;
				break label_6;
			}
			export(scope);
		}
		jj_consume_token(78);
		{
			if (true)
				throw new UnsupportedOperationException();
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 17 */
	final public ValueDcl value_dcl(Scope scope) throws ParseException {
		value_header(scope);
		jj_consume_token(77);
		label_7: while (true) {
			switch (jj_nt.kind) {
			case EXCEPTION:
			case ANY:
			case PUBLIC:
			case TYPEDEF:
			case ATTRIBUTE:
			case ENUM:
			case TYPEID:
			case BOOLEAN:
			case LONG:
			case TYPEPREFIX:
			case FACTORY:
			case READONLY:
			case UNSIGNED:
			case CHAR:
			case UNION:
			case NATIVE:
			case CONST:
			case SHORT:
			case VALUE_BASE:
			case FLOAT:
			case OCTET:
			case IDL_STRING:
			case ONEWAY:
			case STRUCT:
			case VOID:
			case WCHAR:
			case DOUBLE:
			case PRIVATE:
			case OBJECT:
			case 81:
			case ID: {
				;
				break;
			}
			default:
				jj_la1[23] = jj_gen;
				break label_7;
			}
			value_element(scope);
		}
		jj_consume_token(78);
		{
			if (true)
				throw new UnsupportedOperationException();
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 18 */
	final public ValueDcl value_header(Scope parent) throws ParseException {
		switch (jj_nt.kind) {
		case CUSTOM: {
			jj_consume_token(CUSTOM);
			break;
		}
		default:
			jj_la1[24] = jj_gen;
			;
		}
		jj_consume_token(VALUETYPE);
		identifier();
		switch (jj_nt.kind) {
		case 79: {
			value_inheritance_spec(parent);
			break;
		}
		default:
			jj_la1[25] = jj_gen;
			;
		}
		{
			if (true)
				throw new UnsupportedOperationException();
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 19 */
	final public void value_inheritance_spec(Scope scope) throws ParseException {
		jj_consume_token(79);
		switch (jj_nt.kind) {
		case TRUNCATABLE: {
			jj_consume_token(TRUNCATABLE);
			break;
		}
		default:
			jj_la1[26] = jj_gen;
			;
		}
		value_name();
		label_8: while (true) {
			switch (jj_nt.kind) {
			case 80: {
				;
				break;
			}
			default:
				jj_la1[27] = jj_gen;
				break label_8;
			}
			jj_consume_token(80);
			value_name();
		}
		switch (jj_nt.kind) {
		case SUPPORTS: {
			jj_consume_token(SUPPORTS);
			interface_name();
			label_9: while (true) {
				switch (jj_nt.kind) {
				case 80: {
					;
					break;
				}
				default:
					jj_la1[28] = jj_gen;
					break label_9;
				}
				jj_consume_token(80);
				interface_name();
			}
			break;
		}
		default:
			jj_la1[29] = jj_gen;
			;
		}
		{
			if (true)
				throw new UnsupportedOperationException();
		}
	}

	/* Production 20 */
	final public void value_name() throws ParseException {
		scoped_name();
	}

	/* Production 21 */
	final public void value_element(Scope scope) throws ParseException {
		switch (jj_nt.kind) {
		case EXCEPTION:
		case ANY:
		case TYPEDEF:
		case ATTRIBUTE:
		case ENUM:
		case TYPEID:
		case BOOLEAN:
		case LONG:
		case TYPEPREFIX:
		case READONLY:
		case UNSIGNED:
		case CHAR:
		case UNION:
		case NATIVE:
		case CONST:
		case SHORT:
		case VALUE_BASE:
		case FLOAT:
		case OCTET:
		case IDL_STRING:
		case ONEWAY:
		case STRUCT:
		case VOID:
		case WCHAR:
		case DOUBLE:
		case OBJECT:
		case 81:
		case ID: {
			export(scope);
			break;
		}
		case PUBLIC:
		case PRIVATE: {
			state_member(scope);
			break;
		}
		case FACTORY: {
			init_dcl(scope);
			break;
		}
		default:
			jj_la1[30] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
	}

	/* Production 22 */
	final public void state_member(Scope scope) throws ParseException {
		switch (jj_nt.kind) {
		case PUBLIC: {
			jj_consume_token(PUBLIC);
			break;
		}
		case PRIVATE: {
			jj_consume_token(PRIVATE);
			break;
		}
		default:
			jj_la1[31] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		type_spec(scope);
		declarators(scope);
		jj_consume_token(76);
	}

	/* Production 23 */
	final public void init_dcl(Scope scope) throws ParseException {
		jj_consume_token(FACTORY);
		identifier();
		jj_consume_token(82);
		switch (jj_nt.kind) {
		case IN: {
			init_param_decls(scope);
			break;
		}
		default:
			jj_la1[32] = jj_gen;
			;
		}
		jj_consume_token(83);
		switch (jj_nt.kind) {
		case RAISES: {
			raises_expr(scope);
			break;
		}
		default:
			jj_la1[33] = jj_gen;
			;
		}
		jj_consume_token(76);
		{
			if (true)
				throw new UnsupportedOperationException();
		}
	}

	/* Production 24 */
	final public void init_param_decls(Scope scope) throws ParseException {
		init_param_decl(scope);
		label_10: while (true) {
			switch (jj_nt.kind) {
			case 80: {
				;
				break;
			}
			default:
				jj_la1[34] = jj_gen;
				break label_10;
			}
			jj_consume_token(80);
			init_param_decl(scope);
		}
	}

	/* Production 25 */
	final public void init_param_decl(Scope scope) throws ParseException {
		init_param_attribute();
		param_type_spec(scope);
		simple_declarator();
	}

	/* Production 26 */
	final public void init_param_attribute() throws ParseException {
		jj_consume_token(IN);
	}

	/* Production 27 */
	final public IdlConstDcl const_dcl(Scope parent) throws ParseException {
		IdlConstDcl constDcl = IdlFactory.eINSTANCE.createIdlConstDcl();
		IdlType type = null;
		int startLine = 0;
		int startColumn = 0;
		int endLine = 0;
		int endColumn = 0;
		Comment comment = popComment();
		jj_consume_token(CONST);
		startLine = token.beginLine;
		startColumn = token.beginColumn;
		type = const_type(parent);
		constDcl.setType(type);
		identifiableElement(constDcl);
		jj_consume_token(84);
		const_exp(parent);
		endLine = token.endLine;
		endColumn = token.endColumn;
		constDcl.setStartLine(startLine);
		constDcl.setStartColumn(startColumn);
		constDcl.setEndLine(endLine);
		constDcl.setEndColumn(endColumn);
		constDcl.setComment(comment);
		parent.addMember(constDcl, token);
		{
			if ("" != null)
				return constDcl;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 28 */
	final public IdlType const_type(Scope scope) throws ParseException {
		IdlType retVal = null;
		String scopedName = null;
		if (jj_2_7(2)) {
			retVal = integer_type();
		} else {
			switch (jj_nt.kind) {
			case LONG:
			case FLOAT:
			case DOUBLE: {
				retVal = floating_pt_type();
				break;
			}
			case CHAR: {
				retVal = char_type();
				break;
			}
			case WCHAR: {
				retVal = wide_char_type();
				break;
			}
			case BOOLEAN: {
				retVal = boolean_type();
				break;
			}
			case IDL_STRING: {
				retVal = string_type(scope);
				break;
			}
			case WSTRING: {
				retVal = wide_string_type(scope);
				break;
			}
			case FIXED: {
				retVal = fixed_pt_const_type(scope);
				break;
			}
			case OCTET: {
				retVal = octet_type();
				break;
			}
			case 81:
			case ID: {
				scopedName = scoped_name();
				retVal = scope.findType(scopedName, token);
				break;
			}
			default:
				jj_la1[35] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 29 */
	final public Expression const_exp(Scope scope) throws ParseException {
		Expression retVal = null;
		retVal = or_expr(scope);
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 30 */
	final public Expression or_expr(Scope scope) throws ParseException {
		Expression left = null;
		Expression right = null;
		left = xor_expr(scope);
		switch (jj_nt.kind) {
		case 85: {
			jj_consume_token(85);
			right = or_expr(scope);
			OrExpression retVal = ExpressionsFactory.eINSTANCE.createOrExpression();
			retVal.setStartLine(left.getStartLine());
			retVal.setStartColumn(left.getStartColumn());
			retVal.setEndLine(right.getEndLine());
			retVal.setEndColumn(right.getEndColumn());
			retVal.setLeft(left);
			retVal.setRight(right);
			{
				if ("" != null)
					return retVal;
			}
			break;
		}
		default:
			jj_la1[36] = jj_gen;
			;
		}
		{
			if ("" != null)
				return left;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 31 */
	final public Expression xor_expr(Scope scope) throws ParseException {
		Expression left = null;
		Expression right = null;
		left = and_expr(scope);
		switch (jj_nt.kind) {
		case 86: {
			jj_consume_token(86);
			right = xor_expr(scope);
			XOrExpression retVal = ExpressionsFactory.eINSTANCE.createXOrExpression();
			retVal.setStartLine(left.getStartLine());
			retVal.setStartColumn(left.getStartColumn());
			retVal.setEndLine(right.getEndLine());
			retVal.setEndColumn(right.getEndColumn());
			retVal.setLeft(left);
			retVal.setRight(right);
			{
				if ("" != null)
					return retVal;
			}
			break;
		}
		default:
			jj_la1[37] = jj_gen;
			;
		}
		{
			if ("" != null)
				return left;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 32 */
	final public Expression and_expr(Scope scope) throws ParseException {
		Expression left = null;
		Expression right = null;
		left = shift_expr(scope);
		switch (jj_nt.kind) {
		case 87: {
			jj_consume_token(87);
			right = and_expr(scope);
			AndExpression retVal = ExpressionsFactory.eINSTANCE.createAndExpression();
			retVal.setStartLine(left.getStartLine());
			retVal.setStartColumn(left.getStartColumn());
			retVal.setEndLine(right.getEndLine());
			retVal.setEndColumn(right.getEndColumn());
			retVal.setLeft(left);
			retVal.setRight(right);
			{
				if ("" != null)
					return retVal;
			}
			break;
		}
		default:
			jj_la1[38] = jj_gen;
			;
		}
		{
			if ("" != null)
				return left;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 33 */
	final public Expression shift_expr(Scope scope) throws ParseException {
		Expression left = null;
		Expression right = null;
		ShiftType shiftType = null;
		left = add_expr(scope);
		switch (jj_nt.kind) {
		case 88:
		case 89: {
			switch (jj_nt.kind) {
			case 88: {
				jj_consume_token(88);
				shiftType = ShiftType.RIGHT;
				break;
			}
			case 89: {
				jj_consume_token(89);
				shiftType = ShiftType.LEFT;
				break;
			}
			default:
				jj_la1[39] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
			right = shift_expr(scope);
			ShiftExpression retVal = ExpressionsFactory.eINSTANCE.createShiftExpression();
			retVal.setStartLine(left.getStartLine());
			retVal.setStartColumn(left.getStartColumn());
			retVal.setEndLine(right.getEndLine());
			retVal.setEndColumn(right.getEndColumn());
			retVal.setLeft(left);
			retVal.setRight(right);
			retVal.setType(shiftType);
			{
				if ("" != null)
					return retVal;
			}
			break;
		}
		default:
			jj_la1[40] = jj_gen;
			;
		}
		{
			if ("" != null)
				return left;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 34 */
	final public Expression add_expr(Scope scope) throws ParseException {
		Expression left = null;
		Expression right = null;
		AddType type = null;
		left = mult_expr(scope);
		switch (jj_nt.kind) {
		case 90:
		case 91: {
			switch (jj_nt.kind) {
			case 90: {
				jj_consume_token(90);
				type = AddType.ADDITION;
				break;
			}
			case 91: {
				jj_consume_token(91);
				type = AddType.SUBTRACTION;
				break;
			}
			default:
				jj_la1[41] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
			right = add_expr(scope);
			AddExpression retVal = ExpressionsFactory.eINSTANCE.createAddExpression();
			retVal.setStartLine(left.getStartLine());
			retVal.setStartColumn(left.getStartColumn());
			retVal.setEndLine(right.getEndLine());
			retVal.setEndColumn(right.getEndColumn());
			retVal.setLeft(left);
			retVal.setRight(right);
			retVal.setType(type);
			{
				if ("" != null)
					return retVal;
			}
			break;
		}
		default:
			jj_la1[42] = jj_gen;
			;
		}
		{
			if ("" != null)
				return left;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 35 */
	final public Expression mult_expr(Scope scope) throws ParseException {
		Expression left = null;
		Expression right = null;
		MultiType type = null;
		left = unary_expr(scope);
		switch (jj_nt.kind) {
		case 92:
		case 93:
		case 94: {
			switch (jj_nt.kind) {
			case 92: {
				jj_consume_token(92);
				type = MultiType.MULTIPLICATION;
				break;
			}
			case 93: {
				jj_consume_token(93);
				type = MultiType.DIVISION;
				break;
			}
			case 94: {
				jj_consume_token(94);
				type = MultiType.MODULATION;
				break;
			}
			default:
				jj_la1[43] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
			right = mult_expr(scope);
			MultExpression retVal = ExpressionsFactory.eINSTANCE.createMultExpression();
			retVal.setStartLine(left.getStartLine());
			retVal.setStartColumn(left.getStartColumn());
			retVal.setEndLine(right.getEndLine());
			retVal.setEndColumn(right.getEndColumn());
			retVal.setLeft(left);
			retVal.setRight(right);
			retVal.setType(type);
			{
				if ("" != null)
					return retVal;
			}
			break;
		}
		default:
			jj_la1[44] = jj_gen;
			;
		}
		{
			if ("" != null)
				return left;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 36 */
	final public Expression unary_expr(Scope scope) throws ParseException {
		UnaryType type = null;
		Expression retVal = null;
		int startLine = 0;
		int startColumn = 0;
		switch (jj_nt.kind) {
		case 90:
		case 91:
		case 95: {
			type = unary_operator();
			startLine = token.beginLine;
			startColumn = token.beginColumn;
			break;
		}
		default:
			jj_la1[45] = jj_gen;
			;
		}
		retVal = primary_expr(scope);
		if (type != null) {
			UnaryExpression uRetVal = ExpressionsFactory.eINSTANCE.createUnaryExpression();
			uRetVal.setStartLine(startLine);
			uRetVal.setStartColumn(startColumn);
			uRetVal.setEndLine(retVal.getEndLine());
			uRetVal.setEndColumn(retVal.getEndColumn());
			uRetVal.setType(type);
			uRetVal.setExpr(retVal);
			retVal = uRetVal;
		}
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 37 */
	final public UnaryType unary_operator() throws ParseException {
		switch (jj_nt.kind) {
		case 91: {
			jj_consume_token(91);
			{
				if ("" != null)
					return UnaryType.NEGATIVE;
			}
			break;
		}
		case 90: {
			jj_consume_token(90);
			{
				if ("" != null)
					return UnaryType.POSITIVE;
			}
			break;
		}
		case 95: {
			jj_consume_token(95);
			{
				if ("" != null)
					return UnaryType.TILDE;
			}
			break;
		}
		default:
			jj_la1[46] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 38 */
	final public Expression primary_expr(Scope scope) throws ParseException {
		Expression retVal;
		String scopedName = null;
		int startLine = 0;
		int startColumn = 0;
		switch (jj_nt.kind) {
		case 81:
		case ID: {
			scopedName = scoped_name();
			ScopeLiteral literal = ExpressionsFactory.eINSTANCE.createScopeLiteral();
			literal.setValue(scope.findType(scopedName, token));
			retVal = literal;
			retVal.setStartLine(token.beginLine);
			retVal.setStartColumn(token.beginColumn);
			retVal.setEndLine(token.endLine);
			retVal.setEndColumn(token.endColumn);
			break;
		}
		case FALSE:
		case TRUE:
		case OCTALINT:
		case DECIMALINT:
		case FIXED_PT:
		case HEXADECIMALINT:
		case FLOATONE:
		case FLOATTWO:
		case CHARACTER:
		case WCHARACTER:
		case STRING:
		case WSTRING_LITERAL: {
			retVal = literal();
			break;
		}
		case 82: {
			jj_consume_token(82);
			startLine = token.beginLine;
			startColumn = token.beginColumn;
			retVal = const_exp(scope);
			jj_consume_token(83);
			retVal.setStartLine(startLine);
			retVal.setStartColumn(startColumn);
			retVal.setEndLine(token.endLine);
			retVal.setEndColumn(token.endColumn);
			break;
		}
		default:
			jj_la1[47] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 39 */
	final public Expression literal() throws ParseException {
		Expression retVal = null;
		switch (jj_nt.kind) {
		case OCTALINT:
		case DECIMALINT:
		case HEXADECIMALINT: {
			retVal = integer_literal();
			break;
		}
		case STRING: {
			retVal = string_literal();
			break;
		}
		case CHARACTER: {
			retVal = character_literal();
			break;
		}
		case WSTRING_LITERAL: {
			retVal = wide_string_literal();
			break;
		}
		case WCHARACTER: {
			retVal = wide_character_literal();
			break;
		}
		case FIXED_PT: {
			retVal = fixed_pt_literal();
			break;
		}
		case FLOATONE:
		case FLOATTWO: {
			retVal = floating_pt_literal();
			break;
		}
		case FALSE:
		case TRUE: {
			retVal = boolean_literal();
			break;
		}
		default:
			jj_la1[48] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 40 */
	final public BooleanLiteral boolean_literal() throws ParseException {
		BooleanLiteral literal = ExpressionsFactory.eINSTANCE.createBooleanLiteral();
		switch (jj_nt.kind) {
		case TRUE: {
			jj_consume_token(TRUE);
			literal.setStartLine(token.beginLine);
			literal.setStartColumn(token.beginColumn);
			literal.setEndLine(token.endLine);
			literal.setEndColumn(token.endColumn);
			literal.setValue(true);
			break;
		}
		case FALSE: {
			jj_consume_token(FALSE);
			literal.setStartLine(token.beginLine);
			literal.setStartColumn(token.beginColumn);
			literal.setEndLine(token.endLine);
			literal.setEndColumn(token.endColumn);
			literal.setValue(false);
			break;
		}
		default:
			jj_la1[49] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		{
			if ("" != null)
				return literal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 41 */
	final public Expression positive_int_const(Scope scope) throws ParseException {
		Expression retVal = null;
		retVal = const_exp(scope);
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 42 */
	final public List< ? extends IdlTypeDcl> type_dcl(Scope scope) throws ParseException {
		List< ? extends IdlTypeDcl> retVal = null;
		IdlTypeDcl typeDcl = null;
		switch (jj_nt.kind) {
		case TYPEDEF: {
			jj_consume_token(TYPEDEF);
			retVal = type_declarator(scope);
			break;
		}
		case STRUCT: {
			typeDcl = structx(scope);
			break;
		}
		case UNION: {
			typeDcl = unionx(scope);
			break;
		}
		case ENUM: {
			typeDcl = enum_type(scope);
			break;
		}
		case NATIVE: {
			typeDcl = native_type_declarator(scope);
			break;
		}
		default:
			jj_la1[50] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		if (retVal == null) {
			retVal = Collections.singletonList(typeDcl);
		}
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	final public NativeTypeDcl native_type_declarator(Scope scope) throws ParseException {
		Declarator nativeDeclarator = null;
		NativeTypeDcl retVal = IdlFactory.eINSTANCE.createNativeTypeDcl();
		jj_consume_token(NATIVE);
		nativeDeclarator = simple_declarator();
		retVal.setDeclarator(nativeDeclarator);
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 43 */
	final public List<TypeDef> type_declarator(Scope scope) throws ParseException {
		IdlType type = null;
		List<Declarator> declarators = null;
		Comment comment = popComment();
		type = type_spec(scope);
		declarators = declarators(scope);
		List<TypeDef> retVal = new ArrayList<TypeDef>();
		for (Declarator declarator : declarators) {
			TypeDef def = TypesFactory.eINSTANCE.createTypeDef();
			def.setType(type);
			def.setName(declarator.getName());
			def.setComment(comment);
			def.setStartLine(declarator.getStartLine());
			def.setStartColumn(declarator.getStartColumn());
			def.setEndLine(declarator.getEndLine());
			def.setEndColumn(declarator.getEndColumn());
			scope.addMember(def, token);
			retVal.add(def);
		}
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 44 */
	final public IdlType type_spec(Scope scope) throws ParseException {
		IdlType retVal = null;
		switch (jj_nt.kind) {
		case ANY:
		case BOOLEAN:
		case LONG:
		case UNSIGNED:
		case CHAR:
		case SEQUENCE:
		case FIXED:
		case SHORT:
		case VALUE_BASE:
		case FLOAT:
		case OCTET:
		case IDL_STRING:
		case WCHAR:
		case WSTRING:
		case DOUBLE:
		case OBJECT:
		case 81:
		case ID: {
			retVal = simple_type_spec(scope);
			break;
		}
		case ENUM:
		case UNION:
		case STRUCT: {
			retVal = constr_type_spec(scope);
			break;
		}
		default:
			jj_la1[51] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 45 */
	final public IdlType simple_type_spec(Scope scope) throws ParseException {
		IdlType retVal = null;
		String scopedName = null;
		switch (jj_nt.kind) {
		case ANY:
		case BOOLEAN:
		case LONG:
		case UNSIGNED:
		case CHAR:
		case SHORT:
		case VALUE_BASE:
		case FLOAT:
		case OCTET:
		case WCHAR:
		case DOUBLE:
		case OBJECT: {
			retVal = base_type_spec();
			break;
		}
		case SEQUENCE:
		case FIXED:
		case IDL_STRING:
		case WSTRING: {
			retVal = template_type_spec(scope);
			break;
		}
		case 81:
		case ID: {
			scopedName = scoped_name();
			retVal = scope.findType(scopedName, token);
			break;
		}
		default:
			jj_la1[52] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 46 */
	final public PrimitiveType base_type_spec() throws ParseException {
		PrimitiveType retVal = null;
		if (jj_2_8(2)) {
			retVal = floating_pt_type();
		} else {
			switch (jj_nt.kind) {
			case LONG:
			case UNSIGNED:
			case SHORT: {
				retVal = integer_type();
				break;
			}
			case CHAR: {
				retVal = char_type();
				break;
			}
			case WCHAR: {
				retVal = wide_char_type();
				break;
			}
			case BOOLEAN: {
				retVal = boolean_type();
				break;
			}
			case OCTET: {
				retVal = octet_type();
				break;
			}
			case ANY: {
				retVal = any_type();
				break;
			}
			case OBJECT: {
				retVal = object_type();
				break;
			}
			case VALUE_BASE: {
				retVal = value_base_type();
				break;
			}
			default:
				jj_la1[53] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 47 */
	final public TemplateType template_type_spec(Scope scope) throws ParseException {
		TemplateType retVal = null;
		switch (jj_nt.kind) {
		case SEQUENCE: {
			retVal = sequence_type(scope);
			break;
		}
		case IDL_STRING: {
			retVal = string_type(scope);
			break;
		}
		case WSTRING: {
			retVal = wide_string_type(scope);
			break;
		}
		case FIXED: {
			retVal = fixed_pt_type(scope);
			break;
		}
		default:
			jj_la1[54] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 48 */
	final public IdlTypeDcl constr_type_spec(Scope scope) throws ParseException {
		IdlTypeDcl retVal = null;
		switch (jj_nt.kind) {
		case STRUCT: {
			retVal = struct_type(scope);
			break;
		}
		case UNION: {
			retVal = union_type(scope);
			break;
		}
		case ENUM: {
			retVal = enum_type(scope);
			break;
		}
		default:
			jj_la1[55] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 49 */
	final public List<Declarator> declarators(Scope scope) throws ParseException {
		List<Declarator> retVal = new ArrayList<Declarator>();
		Declarator declarator = null;
		declarator = declarator(scope);
		retVal.add(declarator);
		label_11: while (true) {
			switch (jj_nt.kind) {
			case 80: {
				;
				break;
			}
			default:
				jj_la1[56] = jj_gen;
				break label_11;
			}
			jj_consume_token(80);
			declarator = declarator(scope);
			retVal.add(declarator);
		}
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 50 */
	final public Declarator declarator(Scope scope) throws ParseException {
		Declarator retVal = null;
		if (jj_2_9(2)) {
			retVal = complex_declarator(scope);
		} else {
			switch (jj_nt.kind) {
			case ID: {
				retVal = simple_declarator();
				break;
			}
			default:
				jj_la1[57] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 51 */
	final public Declarator simple_declarator() throws ParseException {
		Declarator retVal = IdlFactory.eINSTANCE.createDeclarator();
		int startLine = 0;
		int startColumn = 0;
		int endLine = 0;
		int endColumn = 0;
		startLine = token.endLine;
		startColumn = token.endColumn;
		identifiableElement(retVal);
		endLine = token.endLine;
		endColumn = token.endColumn;
		retVal.setStartLine(startLine);
		retVal.setStartColumn(startColumn);
		retVal.setEndLine(endLine);
		retVal.setEndColumn(endColumn);
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 52 */
	final public Declarator complex_declarator(Scope scope) throws ParseException {
		Declarator retVal = null;
		retVal = array_declarator(scope);
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 53 */
	final public PrimitiveType floating_pt_type() throws ParseException {
		PrimitiveType retVal = null;
		switch (jj_nt.kind) {
		case FLOAT: {
			jj_consume_token(FLOAT);
			retVal = TypesFactory.eINSTANCE.createFloat();
			break;
		}
		case DOUBLE: {
			jj_consume_token(DOUBLE);
			retVal = TypesFactory.eINSTANCE.createDouble();
			break;
		}
		case LONG: {
			jj_consume_token(LONG);
			jj_consume_token(DOUBLE);
			retVal = TypesFactory.eINSTANCE.createLongDouble();
			break;
		}
		default:
			jj_la1[58] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 54 */
	final public PrimitiveType integer_type() throws ParseException {
		PrimitiveType retVal = null;
		switch (jj_nt.kind) {
		case LONG:
		case SHORT: {
			retVal = signed_int();
			break;
		}
		case UNSIGNED: {
			retVal = unsigned_int();
			break;
		}
		default:
			jj_la1[59] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 55 */
	final public PrimitiveType signed_int() throws ParseException {
		PrimitiveType retVal = null;
		if (jj_2_10(2)) {
			retVal = signed_long_long();
		} else {
			switch (jj_nt.kind) {
			case LONG: {
				retVal = signed_long_int();
				break;
			}
			case SHORT: {
				retVal = signed_short_int();
				break;
			}
			default:
				jj_la1[60] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 56 */
	final public gov.redhawk.eclipsecorba.idl.types.Short signed_short_int() throws ParseException {
		jj_consume_token(SHORT);
		{
			if ("" != null)
				return TypesFactory.eINSTANCE.createShort();
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 57 */
	final public gov.redhawk.eclipsecorba.idl.types.Long signed_long_int() throws ParseException {
		jj_consume_token(LONG);
		{
			if ("" != null)
				return TypesFactory.eINSTANCE.createLong();
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 58 */
	final public gov.redhawk.eclipsecorba.idl.types.LongLong signed_long_long() throws ParseException {
		jj_consume_token(LONG);
		jj_consume_token(LONG);
		{
			if ("" != null)
				return TypesFactory.eINSTANCE.createLongLong();
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 59 */
	final public PrimitiveType unsigned_int() throws ParseException {
		PrimitiveType retVal = null;
		if (jj_2_11(3)) {
			retVal = unsigned_long_long_int();
		} else if (jj_2_12(2)) {
			retVal = unsigned_long_int();
		} else {
			switch (jj_nt.kind) {
			case UNSIGNED: {
				retVal = unsigned_short_int();
				break;
			}
			default:
				jj_la1[61] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 60 */
	final public UShort unsigned_short_int() throws ParseException {
		jj_consume_token(UNSIGNED);
		jj_consume_token(SHORT);
		{
			if ("" != null)
				return TypesFactory.eINSTANCE.createUShort();
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 61 */
	final public ULong unsigned_long_int() throws ParseException {
		jj_consume_token(UNSIGNED);
		jj_consume_token(LONG);
		{
			if ("" != null)
				return TypesFactory.eINSTANCE.createULong();
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 62 */
	final public ULongLong unsigned_long_long_int() throws ParseException {
		jj_consume_token(UNSIGNED);
		jj_consume_token(LONG);
		jj_consume_token(LONG);
		{
			if ("" != null)
				return TypesFactory.eINSTANCE.createULongLong();
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 63 */
	final public IdlChar char_type() throws ParseException {
		jj_consume_token(CHAR);
		{
			if ("" != null)
				return TypesFactory.eINSTANCE.createIdlChar();
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 64 */
	final public IdlWChar wide_char_type() throws ParseException {
		jj_consume_token(WCHAR);
		{
			if ("" != null)
				return TypesFactory.eINSTANCE.createIdlWChar();
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 65 */
	final public gov.redhawk.eclipsecorba.idl.types.Boolean boolean_type() throws ParseException {
		jj_consume_token(BOOLEAN);
		{
			if ("" != null)
				return TypesFactory.eINSTANCE.createBoolean();
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 66 */
	final public Octet octet_type() throws ParseException {
		jj_consume_token(OCTET);
		{
			if ("" != null)
				return TypesFactory.eINSTANCE.createOctet();
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 67 */
	final public Any any_type() throws ParseException {
		jj_consume_token(ANY);
		{
			if ("" != null)
				return TypesFactory.eINSTANCE.createAny();
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 68 */
	final public IdlObject object_type() throws ParseException {
		jj_consume_token(OBJECT);
		{
			if ("" != null)
				return TypesFactory.eINSTANCE.createIdlObject();
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 69 */
	final public StructType struct_type(Scope parent) throws ParseException {
		StructType retVal = TypesFactory.eINSTANCE.createStructType();
		Scope structScope = null;
		List<Member> members = null;
		int startLine = 0;
		int startColumn = 0;
		int endLine = 0;
		int endColumn = 0;
		Comment comment = popComment();
		jj_consume_token(STRUCT);
		startLine = token.beginLine;
		startColumn = token.beginColumn;
		identifiableElement(retVal);
		StructType stub = parent.findStructTypeStub(retVal.getName());
		if (stub != null) {
			retVal = stub;
			structScope = parent.getScope(retVal);
		} else {
			structScope = new Scope(retVal, parent, token);
		}
		jj_consume_token(77);
		members = member_list(structScope);
		jj_consume_token(78);
		endLine = token.endLine;
		endColumn = token.endColumn;
		retVal.setStartLine(startLine);
		retVal.setStartColumn(startColumn);
		retVal.setEndLine(endLine);
		retVal.setEndColumn(endColumn);
		retVal.setComment(comment);
		retVal.getMembers().addAll(members);
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 70 */
	final public List<Member> member_list(Scope scope) throws ParseException {
		List<Member> retVal = new ArrayList<Member>();
		Member member = null;
		label_12: while (true) {
			member = member(scope);
			retVal.add(member);
			switch (jj_nt.kind) {
			case ANY:
			case ENUM:
			case BOOLEAN:
			case LONG:
			case UNSIGNED:
			case CHAR:
			case UNION:
			case SEQUENCE:
			case FIXED:
			case SHORT:
			case VALUE_BASE:
			case FLOAT:
			case OCTET:
			case IDL_STRING:
			case STRUCT:
			case WCHAR:
			case WSTRING:
			case DOUBLE:
			case OBJECT:
			case 81:
			case ID: {
				;
				break;
			}
			default:
				jj_la1[62] = jj_gen;
				break label_12;
			}
		}
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 71 */
	final public Member member(Scope scope) throws ParseException {
		Member retVal = IdlFactory.eINSTANCE.createMember();
		IdlType type = null;
		List<Declarator> declarators = null;
		int startLine = 0;
		int startColumn = 0;
		int endLine = 0;
		int endColumn = 0;
		Comment comment = popComment();
		type = type_spec(scope);
		startLine = token.beginLine;
		startColumn = token.beginColumn;
		retVal.setType(type);
		declarators = declarators(scope);
		jj_consume_token(76);
		endLine = token.endLine;
		endColumn = token.endColumn;
		retVal.setStartLine(startLine);
		retVal.setStartColumn(startColumn);
		retVal.setEndLine(endLine);
		retVal.setEndColumn(endColumn);
		retVal.getDeclarators().addAll(declarators);
		retVal.setComment(comment);
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 72 */
	final public UnionType union_type(Scope parent) throws ParseException {
		UnionType retVal = TypesFactory.eINSTANCE.createUnionType();
		Scope unionScope = null;
		int startLine = 0;
		int startColumn = 0;
		int endLine = 0;
		int endColumn = 0;
		Comment comment = popComment();
		Switch idlSwitch = null;
		jj_consume_token(UNION);
		startLine = token.beginLine;
		startColumn = token.beginColumn;
		identifiableElement(retVal);
		UnionType stub = parent.findUnionTypeStub(retVal.getName());
		if (stub != null) {
			retVal = stub;
			unionScope = parent.getScope(retVal);
		} else {
			unionScope = new Scope(retVal, parent, token);
		}
		idlSwitch = idl_switch(unionScope);
		endLine = idlSwitch.getEndLine();
		endColumn = idlSwitch.getEndColumn();
		retVal.setStartLine(startLine);
		retVal.setStartColumn(startColumn);
		retVal.setEndLine(endLine);
		retVal.setEndColumn(endColumn);
		retVal.setIdlSwitch(idlSwitch);
		retVal.setComment(comment);
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	final public Switch idl_switch(Scope scope) throws ParseException {
		Switch idlSwitch = TypesFactory.eINSTANCE.createSwitch();
		IdlType switchType = null;
		List<Case> cases = null;
		int startLine = 0;
		int startColumn = 0;
		int endLine = 0;
		int endColumn = 0;
		Scope localScope = null;
		jj_consume_token(SWITCH);
		startLine = token.beginLine;
		startColumn = token.beginColumn;
		jj_consume_token(82);
		switchType = switch_type_spec(scope);
		if (switchType instanceof Identifiable) {
			localScope = scope.getScope((Identifiable) switchType);
		} else {
			localScope = scope;
		}
		jj_consume_token(83);
		jj_consume_token(77);
		cases = switch_body(localScope);
		jj_consume_token(78);
		endLine = token.endLine;
		endColumn = token.endColumn;
		idlSwitch.setStartLine(startLine);
		idlSwitch.setStartColumn(startColumn);
		idlSwitch.setEndLine(endLine);
		idlSwitch.setEndColumn(endColumn);
		idlSwitch.setType(switchType);
		idlSwitch.getCases().addAll(cases);
		{
			if ("" != null)
				return idlSwitch;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 73 */
	final public IdlType switch_type_spec(Scope scope) throws ParseException {
		IdlType retVal = null;
		String scopedName = null;
		switch (jj_nt.kind) {
		case LONG:
		case UNSIGNED:
		case SHORT: {
			retVal = integer_type();
			break;
		}
		case CHAR: {
			retVal = char_type();
			break;
		}
		case BOOLEAN: {
			retVal = boolean_type();
			break;
		}
		case ENUM: {
			retVal = enum_type(scope);
			break;
		}
		case 81:
		case ID: {
			scopedName = scoped_name();
			retVal = scope.findType(scopedName, token);
			break;
		}
		default:
			jj_la1[63] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 74 */
	final public List<Case> switch_body(Scope scope) throws ParseException {
		List<Case> retVal = new ArrayList<Case>();
		Case c = null;
		label_13: while (true) {
			c = casex(scope);
			retVal.add(c);
			switch (jj_nt.kind) {
			case CASE:
			case _DEFAULT: {
				;
				break;
			}
			default:
				jj_la1[64] = jj_gen;
				break label_13;
			}
		}
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 75 */
	final public Case casex(Scope scope) throws ParseException {
		Case c = TypesFactory.eINSTANCE.createCase();
		CaseLabel label = null;
		ElementSpec spec = null;
		label_14: while (true) {
			label = case_label(scope);
			c.getLabels().add(label);
			switch (jj_nt.kind) {
			case CASE:
			case _DEFAULT: {
				;
				break;
			}
			default:
				jj_la1[65] = jj_gen;
				break label_14;
			}
		}
		spec = element_spec(scope);
		jj_consume_token(76);
		c.setSpec(spec);
		{
			if ("" != null)
				return c;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 76 */
	final public CaseLabel case_label(Scope scope) throws ParseException {
		CaseLabel retVal = null;
		Expression expr = null;
		switch (jj_nt.kind) {
		case CASE: {
			jj_consume_token(CASE);
			expr = const_exp(scope);
			jj_consume_token(79);
			ExprCaseLabel excl = TypesFactory.eINSTANCE.createExprCaseLabel();
			excl.setExpr(expr);
			retVal = excl;
			break;
		}
		case _DEFAULT: {
			jj_consume_token(_DEFAULT);
			jj_consume_token(79);
			retVal = TypesFactory.eINSTANCE.createDefaultCaseLabel();
			break;
		}
		default:
			jj_la1[66] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 77 */
	final public ElementSpec element_spec(Scope scope) throws ParseException {
		ElementSpec spec = TypesFactory.eINSTANCE.createElementSpec();
		IdlType type = null;
		Declarator dec = null;
		type = type_spec(scope);
		dec = declarator(scope);
		spec.setType(type);
		spec.setDeclarator(dec);
		{
			if ("" != null)
				return spec;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 78 */
	final public EnumType enum_type(Scope parent) throws ParseException {
		EnumType type = TypesFactory.eINSTANCE.createEnumType();
		Scope enumScope = null;
		int startLine = 0;
		int startColumn = 0;
		int endLine = 0;
		int endColumn = 0;
		Comment comment = popComment();
		jj_consume_token(ENUM);
		startLine = token.beginLine;
		startColumn = token.beginColumn;
		identifiableElement(type);
		enumScope = new Scope(type, parent, token);
		jj_consume_token(77);
		enumerator(type, enumScope);
		label_15: while (true) {
			switch (jj_nt.kind) {
			case 80: {
				;
				break;
			}
			default:
				jj_la1[67] = jj_gen;
				break label_15;
			}
			jj_consume_token(80);
			enumerator(type, enumScope);
		}
		jj_consume_token(78);
		endLine = token.endLine;
		endColumn = token.endColumn;
		type.setStartLine(startLine);
		type.setStartColumn(startColumn);
		type.setEndLine(endLine);
		type.setEndColumn(endColumn);
		type.setComment(comment);
		{
			if ("" != null)
				return type;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 79 */
	final public void enumerator(EnumType type, Scope scope) throws ParseException {
		Enumeration retVal = TypesFactory.eINSTANCE.createEnumeration();
		int startLine = 0;
		int startColumn = 0;
		int endLine = 0;
		int endColumn = 0;
		Comment comment = popComment();
		identifiableElement(retVal);
		startLine = token.beginLine;
		startColumn = token.beginColumn;
		endLine = token.endLine;
		endColumn = token.endColumn;
		retVal.setStartLine(startLine);
		retVal.setStartColumn(startColumn);
		retVal.setEndLine(endLine);
		retVal.setEndColumn(endColumn);
		retVal.setComment(comment);
		scope.addMember(retVal, token);
		type.getEnumerators().add(retVal);
	}

	/* Production 80 */
	final public SequenceType sequence_type(Scope scope) throws ParseException {
		SequenceType retVal = TypesFactory.eINSTANCE.createSequenceType();
		IdlType type = null;
		int startLine = 0;
		int startColumn = 0;
		int endLine = 0;
		int endColumn = 0;
		jj_consume_token(SEQUENCE);
		startLine = token.beginLine;
		startColumn = token.beginColumn;
		jj_consume_token(96);
		type = simple_type_spec(scope);
		retVal.setType(type);
		switch (jj_nt.kind) {
		case 80: {
			jj_consume_token(80);
			positive_int_const(scope);
			break;
		}
		default:
			jj_la1[68] = jj_gen;
			;
		}
		jj_consume_token(97);
		endLine = token.endLine;
		endColumn = token.endColumn;
		retVal.setStartLine(startLine);
		retVal.setStartColumn(startColumn);
		retVal.setEndLine(endLine);
		retVal.setEndColumn(endColumn);
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 81 */
	final public IdlString string_type(Scope scope) throws ParseException {
		IdlString retVal = TypesFactory.eINSTANCE.createIdlString();
		Expression size = null;
		jj_consume_token(IDL_STRING);
		switch (jj_nt.kind) {
		case 96: {
			jj_consume_token(96);
			size = positive_int_const(scope);
			retVal.setSize(size);
			jj_consume_token(97);
			break;
		}
		default:
			jj_la1[69] = jj_gen;
			;
		}
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 82 */
	final public WString wide_string_type(Scope scope) throws ParseException {
		WString retVal = TypesFactory.eINSTANCE.createWString();
		int startLine = 0;
		int startColumn = 0;
		int endLine = 0;
		int endColumn = 0;
		jj_consume_token(WSTRING);
		startLine = token.beginLine;
		startColumn = token.beginColumn;
		switch (jj_nt.kind) {
		case 96: {
			jj_consume_token(96);
			positive_int_const(scope);
			jj_consume_token(97);
			break;
		}
		default:
			jj_la1[70] = jj_gen;
			;
		}
		endLine = token.endLine;
		endColumn = token.endColumn;
		retVal.setStartLine(startLine);
		retVal.setStartColumn(startColumn);
		retVal.setEndLine(endLine);
		retVal.setEndColumn(endColumn);
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 83 */
	final public ArrayDeclarator array_declarator(Scope scope) throws ParseException {
		ArrayDeclarator retVal = IdlFactory.eINSTANCE.createArrayDeclarator();
		Expression arraySize = null;
		identifiableElement(retVal);
		label_16: while (true) {
			arraySize = fixed_array_size(scope);
			retVal.getArraySizeExpressions().add(arraySize);
			switch (jj_nt.kind) {
			case 98: {
				;
				break;
			}
			default:
				jj_la1[71] = jj_gen;
				break label_16;
			}
		}
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 84 */
	final public Expression fixed_array_size(Scope scope) throws ParseException {
		Expression retVal = null;
		jj_consume_token(98);
		retVal = positive_int_const(scope);
		jj_consume_token(99);
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 85 */
	final public List<Attribute> attr_dcl(Scope scope) throws ParseException {
		List<Attribute> retVal = new ArrayList<Attribute>();
		IdlType type = null;
		Declarator dec = null;
		boolean readOnly = false;
		Attribute att = null;
		int startLine = -1;
		int startColumn = 0;
		int endLine = 0;
		int endColumn = 0;
		switch (jj_nt.kind) {
		case READONLY: {
			jj_consume_token(READONLY);
			startLine = token.beginLine;
			startColumn = token.beginColumn;
			readOnly = true;
			break;
		}
		default:
			jj_la1[72] = jj_gen;
			;
		}
		jj_consume_token(ATTRIBUTE);
		if (startLine == -1) {
			startLine = token.beginLine;
			startColumn = token.beginColumn;
		}
		type = param_type_spec(scope);
		dec = simple_declarator();
		att = OperationsFactory.eINSTANCE.createAttribute();
		att.setReadOnly(readOnly);
		att.setType(type);
		att.setName(dec.getName());
		endLine = token.endLine;
		endColumn = token.endColumn;
		att.setStartLine(startLine);
		att.setStartColumn(startColumn);
		att.setEndLine(endLine);
		att.setEndColumn(endColumn);
		retVal.add(att);
		scope.addMember(att, token);
		label_17: while (true) {
			switch (jj_nt.kind) {
			case 80: {
				;
				break;
			}
			default:
				jj_la1[73] = jj_gen;
				break label_17;
			}
			jj_consume_token(80);
			dec = simple_declarator();
			att = OperationsFactory.eINSTANCE.createAttribute();
			att.setReadOnly(readOnly);
			att.setType(type);
			att.setName(dec.getName());
			endLine = token.endLine;
			endColumn = token.endColumn;
			att.setStartLine(startLine);
			att.setStartColumn(startColumn);
			att.setEndLine(endLine);
			att.setEndColumn(endColumn);
			retVal.add(att);
			scope.addMember(att, token);
		}
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 86 */
	final public IdlException except_dcl(Scope parent) throws ParseException {
		IdlException exception = IdlFactory.eINSTANCE.createIdlException();
		Member member = null;
		int startLine = 0;
		int startColumn = 0;
		int endLine = 0;
		int endColumn = 0;
		Comment comment = popComment();
		jj_consume_token(EXCEPTION);
		startLine = token.beginLine;
		startColumn = token.beginColumn;
		identifiableElement(exception);
		parent.addMember(exception, token);
		jj_consume_token(77);
		label_18: while (true) {
			switch (jj_nt.kind) {
			case ANY:
			case ENUM:
			case BOOLEAN:
			case LONG:
			case UNSIGNED:
			case CHAR:
			case UNION:
			case SEQUENCE:
			case FIXED:
			case SHORT:
			case VALUE_BASE:
			case FLOAT:
			case OCTET:
			case IDL_STRING:
			case STRUCT:
			case WCHAR:
			case WSTRING:
			case DOUBLE:
			case OBJECT:
			case 81:
			case ID: {
				;
				break;
			}
			default:
				jj_la1[74] = jj_gen;
				break label_18;
			}
			member = member(parent);
			exception.getMembers().add(member);
		}
		jj_consume_token(78);
		endLine = token.endLine;
		endColumn = token.endColumn;
		exception.setStartLine(startLine);
		exception.setStartColumn(startColumn);
		exception.setEndLine(endLine);
		exception.setEndColumn(endColumn);
		exception.setComment(comment);
		{
			if ("" != null)
				return exception;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 87 */
	final public Operation op_dcl(Scope parent) throws ParseException {
		Operation retVal = OperationsFactory.eINSTANCE.createOperation();
		IdlType type = null;
		List<Parameter> parameters = null;
		List<IdlException> exceptions = null;
		List<StringLiteral> context = null;
		Scope myScope = null;
		int startLine = -1;
		int startColumn = 0;
		int endLine = 0;
		int endColumn = 0;
		Comment comment = popComment();
		switch (jj_nt.kind) {
		case ONEWAY: {
			op_attribute(retVal);
			startLine = token.beginLine;
			startColumn = token.beginColumn;
			break;
		}
		default:
			jj_la1[75] = jj_gen;
			;
		}
		type = op_type_spec(parent);
		if (startLine == -1) {
			startLine = token.endLine;
			startColumn = token.endColumn;
		}
		identifiableElement(retVal);
		myScope = new Scope(retVal, parent, token);
		parameters = parameter_dcls(myScope);
		switch (jj_nt.kind) {
		case RAISES: {
			exceptions = raises_expr(myScope);
			break;
		}
		default:
			jj_la1[76] = jj_gen;
			;
		}
		switch (jj_nt.kind) {
		case CONTEXT: {
			context = context_expr();
			break;
		}
		default:
			jj_la1[77] = jj_gen;
			;
		}
		endLine = token.endLine;
		endColumn = token.endColumn;
		retVal.setStartLine(startLine);
		retVal.setStartColumn(startColumn);
		retVal.setEndLine(endLine);
		retVal.setEndColumn(endColumn);
		retVal.setComment(comment);
		retVal.setType(type);
		retVal.getParameters().addAll(parameters);
		if (exceptions != null) {
			retVal.getExceptions().addAll(exceptions);
		}
		if (context != null) {
			retVal.getContext().addAll(context);
		}
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 88 */
	final public void op_attribute(Operation op) throws ParseException {
		jj_consume_token(ONEWAY);
		op.setOneway(true);
	}

	/* Production 89 */
	final public IdlType op_type_spec(Scope scope) throws ParseException {
		IdlType retVal = null;
		switch (jj_nt.kind) {
		case ANY:
		case BOOLEAN:
		case LONG:
		case UNSIGNED:
		case CHAR:
		case SHORT:
		case VALUE_BASE:
		case FLOAT:
		case OCTET:
		case IDL_STRING:
		case WCHAR:
		case DOUBLE:
		case OBJECT:
		case 81:
		case ID: {
			retVal = param_type_spec(scope);
			break;
		}
		case VOID: {
			jj_consume_token(VOID);
			retVal = TypesFactory.eINSTANCE.createVoidType();
			break;
		}
		default:
			jj_la1[78] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 90 */
	final public List<Parameter> parameter_dcls(Scope scope) throws ParseException {
		List<Parameter> params = new ArrayList<Parameter>();
		Parameter param = null;
		jj_consume_token(82);
		switch (jj_nt.kind) {
		case INOUT:
		case OUT:
		case IN: {
			param = param_dcl(scope);
			params.add(param);
			label_19: while (true) {
				switch (jj_nt.kind) {
				case 80: {
					;
					break;
				}
				default:
					jj_la1[79] = jj_gen;
					break label_19;
				}
				jj_consume_token(80);
				param = param_dcl(scope);
				params.add(param);
			}
			break;
		}
		default:
			jj_la1[80] = jj_gen;
			;
		}
		jj_consume_token(83);
		{
			if ("" != null)
				return params;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 91 */
	final public Parameter param_dcl(Scope scope) throws ParseException {
		Parameter retVal = OperationsFactory.eINSTANCE.createParameter();
		IdlType type = null;
		Direction direction = null;
		Declarator dec = null;
		int startLine = 0;
		int startColumn = 0;
		int endLine = 0;
		int endColumn = 0;
		startLine = token.endLine;
		startColumn = token.endColumn;
		direction = param_attribute();
		type = param_type_spec(scope);
		dec = simple_declarator();
		endLine = token.endLine;
		endColumn = token.endColumn;
		retVal.setStartLine(startLine);
		retVal.setStartColumn(startColumn);
		retVal.setEndLine(endLine);
		retVal.setEndColumn(endColumn);
		retVal.setName(dec.getName());
		retVal.setType(type);
		retVal.setDirection(direction);
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 92 */
	final public Direction param_attribute() throws ParseException {
		switch (jj_nt.kind) {
		case IN: {
			jj_consume_token(IN);
			{
				if ("" != null)
					return Direction.IN;
			}
			break;
		}
		case OUT: {
			jj_consume_token(OUT);
			{
				if ("" != null)
					return Direction.OUT;
			}
			break;
		}
		case INOUT: {
			jj_consume_token(INOUT);
			{
				if ("" != null)
					return Direction.INOUT;
			}
			break;
		}
		default:
			jj_la1[81] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 93 */
	final public List<IdlException> raises_expr(Scope scope) throws ParseException {
		List<IdlException> exceptions = new ArrayList<IdlException>();
		String name = null;
		IdlException type = null;
		jj_consume_token(RAISES);
		jj_consume_token(82);
		name = scoped_name();
		type = scope.findException(name, token);
		exceptions.add(type);
		label_20: while (true) {
			switch (jj_nt.kind) {
			case 80: {
				;
				break;
			}
			default:
				jj_la1[82] = jj_gen;
				break label_20;
			}
			jj_consume_token(80);
			name = scoped_name();
			type = scope.findException(name, token);
			exceptions.add(type);
		}
		jj_consume_token(83);
		{
			if ("" != null)
				return exceptions;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 94 */
	final public List<StringLiteral> context_expr() throws ParseException {
		List<StringLiteral> context = new ArrayList<StringLiteral>();
		StringLiteral str = null;
		jj_consume_token(CONTEXT);
		jj_consume_token(82);
		str = string_literal();
		context.add(str);
		label_21: while (true) {
			switch (jj_nt.kind) {
			case 80: {
				;
				break;
			}
			default:
				jj_la1[83] = jj_gen;
				break label_21;
			}
			jj_consume_token(80);
			str = string_literal();
			context.add(str);
		}
		jj_consume_token(83);
		{
			if ("" != null)
				return context;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 95 */
	final public IdlType param_type_spec(Scope scope) throws ParseException {
		IdlType retVal = null;
		String scopeName = null;
		switch (jj_nt.kind) {
		case ANY:
		case BOOLEAN:
		case LONG:
		case UNSIGNED:
		case CHAR:
		case SHORT:
		case VALUE_BASE:
		case FLOAT:
		case OCTET:
		case WCHAR:
		case DOUBLE:
		case OBJECT: {
			retVal = base_type_spec();
			break;
		}
		case IDL_STRING: {
			retVal = string_type(scope);
			break;
		}
		case 81:
		case ID: {
			scopeName = scoped_name();
			retVal = scope.findType(scopeName, token);
			break;
		}
		default:
			jj_la1[84] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 96 */
	final public FixedPtType fixed_pt_type(Scope scope) throws ParseException {
		FixedPtType type = TypesFactory.eINSTANCE.createFixedPtType();
		Expression expr1 = null;
		Expression expr2 = null;
		int startLine = 0;
		int startColumn = 0;
		jj_consume_token(FIXED);
		startLine = token.beginLine;
		startColumn = token.beginColumn;
		jj_consume_token(96);
		expr1 = positive_int_const(scope);
		jj_consume_token(80);
		expr2 = positive_int_const(scope);
		jj_consume_token(97);
		type.setStartLine(startLine);
		type.setStartColumn(startColumn);
		type.setEndLine(token.endLine);
		type.setEndColumn(token.endColumn);
		type.setExpr1(expr1);
		type.setExpr2(expr2);
		{
			if ("" != null)
				return type;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 97 */
	final public FixedPtType fixed_pt_const_type(Scope scope) throws ParseException {
		FixedPtType type = TypesFactory.eINSTANCE.createFixedPtType();
		int startLine = 0;
		int startColumn = 0;
		jj_consume_token(FIXED);
		startLine = token.beginLine;
		startColumn = token.beginColumn;
		type.setStartLine(startLine);
		type.setStartColumn(startColumn);
		type.setEndLine(token.endLine);
		type.setEndColumn(token.endColumn);
		{
			if ("" != null)
				return type;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 98 */
	final public ValueBaseType value_base_type() throws ParseException {
		jj_consume_token(VALUE_BASE);
		{
			if ("" != null)
				return TypesFactory.eINSTANCE.createValueBaseType();
		}
		throw new Error("Missing return statement in function");
	}

	final public IdlTypeDcl structx(Scope parent) throws ParseException {
		IdlTypeDcl retVal = null;
		if (jj_2_13(3)) {
			retVal = struct_type(parent);
		} else {
			switch (jj_nt.kind) {
			case STRUCT: {
				retVal = struct_forward_dcl(parent);
				break;
			}
			default:
				jj_la1[85] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	final public IdlTypeDcl unionx(Scope parent) throws ParseException {
		IdlTypeDcl retVal = null;
		if (jj_2_14(3)) {
			retVal = union_type(parent);
		} else {
			switch (jj_nt.kind) {
			case UNION: {
				retVal = union_forward_dcl(parent);
				break;
			}
			default:
				jj_la1[86] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 100 */
	/**
	 * IdlImport idl_import() :
	 * {
	 * IdlImport idlImport = IdlFactory.eINSTANCE.createIdlImport();
	 * String scope = null;
	 * int startLine = 0;
	 * int startColumn = 0;
	 * int endLine = 0;
	 * int endColumn = 0;
	 * }
	 * {
	 * < IMPORT >
	 * {
	 * startLine = token.beginLine;
	 * startColumn = token.beginColumn;
	 * }
	 * scope = imported_scope() ";"
	 * {
	 * endLine = token.endLine;
	 * endColumn = token.endColumn;
	 * idlImport.setStartLine(startLine);
	 * idlImport.setStartColumn(startColumn);
	 * idlImport.setEndLine(endLine);
	 * idlImport.setEndColumn(endColumn);
	 * idlImport.setImportedScope(scope);
	 * return idlImport;
	 * }
	 * }
	 */

	/* Production 101 */
	final public String imported_scope() throws ParseException {
		String scope = null;
		switch (jj_nt.kind) {
		case 81:
		case ID: {
			scope = scoped_name();
			break;
		}
		case STRING: {
			jj_consume_token(STRING);
			scope = token.image;
			break;
		}
		default:
			jj_la1[87] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		{
			if ("" != null)
				return scope;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 102 */
	final public Definition type_id_dcl(Scope scope) throws ParseException {
		Definition retVal = null;
		jj_consume_token(TYPEID);
		scoped_name();
		string_literal();
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 103 */
	final public Definition type_prefix_dcl(Scope scope) throws ParseException {
		Definition retVal = null;
		jj_consume_token(TYPEPREFIX);
		scoped_name();
		string_literal();
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 104 */
	final public void readonly_attr_spec(Scope scope) throws ParseException {
		jj_consume_token(READONLY);
		jj_consume_token(ATTRIBUTE);
		param_type_spec(scope);
		readonly_attr_declarator(scope);
	}

	/* Production 105 */
	final public void readonly_attr_declarator(Scope scope) throws ParseException {
		simple_declarator();
		switch (jj_nt.kind) {
		case RAISES: {
			raises_expr(scope);
			break;
		}
		default:
			jj_la1[89] = jj_gen;
			label_22: while (true) {
				switch (jj_nt.kind) {
				case 80: {
					;
					break;
				}
				default:
					jj_la1[88] = jj_gen;
					break label_22;
				}
				jj_consume_token(80);
				simple_declarator();
			}
		}
	}

	/* Production 106 */
	final public void attr_spec(Scope scope) throws ParseException {
		jj_consume_token(ATTRIBUTE);
		param_type_spec(scope);
		attr_declarator(scope);
	}

	/* Production 107 */
	final public void attr_declarator(Scope scope) throws ParseException {
		simple_declarator();
		switch (jj_nt.kind) {
		case RAISES: {
			raises_expr(scope);
			break;
		}
		default:
			jj_la1[91] = jj_gen;
			label_23: while (true) {
				switch (jj_nt.kind) {
				case 80: {
					;
					break;
				}
				default:
					jj_la1[90] = jj_gen;
					break label_23;
				}
				jj_consume_token(80);
				simple_declarator();
			}
		}
	}

	/* Production 108 */
	final public void attr_raises_expr() throws ParseException {
		switch (jj_nt.kind) {
		case GET_RAISES: {
			get_excep_expr();
			switch (jj_nt.kind) {
			case SET_RAISES: {
				set_excep_expr();
				break;
			}
			default:
				jj_la1[92] = jj_gen;
				;
			}
			break;
		}
		case SET_RAISES: {
			set_excep_expr();
			break;
		}
		default:
			jj_la1[93] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
	}

	/* Production 109 */
	final public void get_excep_expr() throws ParseException {
		jj_consume_token(GET_RAISES);
		exception_list();
	}

	/* Production 110 */
	final public void set_excep_expr() throws ParseException {
		jj_consume_token(SET_RAISES);
		exception_list();
	}

	/* Production 111 */
	final public void exception_list() throws ParseException {
		jj_consume_token(82);
		scoped_name();
		label_24: while (true) {
			switch (jj_nt.kind) {
			case 80: {
				;
				break;
			}
			default:
				jj_la1[94] = jj_gen;
				break label_24;
			}
			jj_consume_token(80);
			scoped_name();
		}
		jj_consume_token(83);
	}

	/* Production 112 */
	final public Definition component(Scope scope) throws ParseException {
		Definition retVal = null;
		if (jj_2_15(3)) {
			component_forward_dcl();
		} else {
			switch (jj_nt.kind) {
			case COMPONENT: {
				component_dcl(scope);
				break;
			}
			default:
				jj_la1[95] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 113 */
	final public void component_forward_dcl() throws ParseException {
		jj_consume_token(COMPONENT);
		identifier();
		{
			if (true)
				throw new UnsupportedOperationException();
		}
	}

	/* Production 114 */
	final public void component_dcl(Scope scope) throws ParseException {
		component_header();
		jj_consume_token(77);
		component_body(scope);
		jj_consume_token(78);
	}

	/* Production 115 */
	final public void component_header() throws ParseException {
		jj_consume_token(COMPONENT);
		identifier();
		switch (jj_nt.kind) {
		case 79: {
			component_inheritance_spec();
			break;
		}
		default:
			jj_la1[96] = jj_gen;
			;
		}
		switch (jj_nt.kind) {
		case SUPPORTS: {
			supported_interface_spec();
			break;
		}
		default:
			jj_la1[97] = jj_gen;
			;
		}
		{
			if (true)
				throw new UnsupportedOperationException();
		}
	}

	/* Production 116 */
	final public void supported_interface_spec() throws ParseException {
		jj_consume_token(SUPPORTS);
		scoped_name();
		label_25: while (true) {
			switch (jj_nt.kind) {
			case 80: {
				;
				break;
			}
			default:
				jj_la1[98] = jj_gen;
				break label_25;
			}
			jj_consume_token(80);
			scoped_name();
		}
	}

	/* Production 117 */
	final public void component_inheritance_spec() throws ParseException {
		jj_consume_token(79);
		scoped_name();
	}

	/* Production 118 */
	final public void component_body(Scope scope) throws ParseException {
		label_26: while (true) {
			switch (jj_nt.kind) {
			case PROVIDES:
			case EMITS:
			case ATTRIBUTE:
			case PUBLISHES:
			case READONLY:
			case USES:
			case CONSUMES: {
				;
				break;
			}
			default:
				jj_la1[99] = jj_gen;
				break label_26;
			}
			component_export(scope);
		}
	}

	/* Production 119 */
	final public void component_export(Scope scope) throws ParseException {
		switch (jj_nt.kind) {
		case PROVIDES: {
			provides_dcl();
			jj_consume_token(76);
			break;
		}
		case USES: {
			uses_dcl();
			jj_consume_token(76);
			break;
		}
		case EMITS: {
			emits_dcl();
			jj_consume_token(76);
			break;
		}
		case PUBLISHES: {
			publishes_dcl();
			jj_consume_token(76);
			break;
		}
		case CONSUMES: {
			consumes_dcl();
			jj_consume_token(76);
			break;
		}
		case ATTRIBUTE:
		case READONLY: {
			attr_dcl(scope);
			jj_consume_token(76);
			break;
		}
		default:
			jj_la1[100] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
	}

	/* Production 120 */
	final public void provides_dcl() throws ParseException {
		jj_consume_token(PROVIDES);
		interface_type();
		identifier();
		{
			if (true)
				throw new UnsupportedOperationException();
		}
	}

	/* Production 121 */
	final public void interface_type() throws ParseException {
		switch (jj_nt.kind) {
		case 81:
		case ID: {
			scoped_name();
			break;
		}
		case OBJECT: {
			jj_consume_token(OBJECT);
			break;
		}
		default:
			jj_la1[101] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		{
			if (true)
				throw new UnsupportedOperationException();
		}
	}

	/* Production 122 */
	final public void uses_dcl() throws ParseException {
		jj_consume_token(USES);
		switch (jj_nt.kind) {
		case MULTIPLE: {
			jj_consume_token(MULTIPLE);
			break;
		}
		default:
			jj_la1[102] = jj_gen;
			;
		}
		interface_type();
		identifier();
		{
			if (true)
				throw new UnsupportedOperationException();
		}
	}

	/* Production 123 */
	final public void emits_dcl() throws ParseException {
		jj_consume_token(EMITS);
		scoped_name();
		identifier();
		{
			if (true)
				throw new UnsupportedOperationException();
		}
	}

	/* Production 124 */
	final public void publishes_dcl() throws ParseException {
		jj_consume_token(PUBLISHES);
		scoped_name();
		identifier();
		{
			if (true)
				throw new UnsupportedOperationException();
		}
	}

	/* Production 125 */
	final public void consumes_dcl() throws ParseException {
		jj_consume_token(CONSUMES);
		scoped_name();
		identifier();
		{
			if (true)
				throw new UnsupportedOperationException();
		}
	}

	/* Production 126 */
	final public Definition home_dcl(Scope scope) throws ParseException {
		Definition retVal = null;
		home_header();
		home_body(scope);
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 127 */
	final public void home_header() throws ParseException {
		jj_consume_token(HOME);
		identifier();
		switch (jj_nt.kind) {
		case 79: {
			home_inheritance_spec();
			break;
		}
		default:
			jj_la1[103] = jj_gen;
			;
		}
		switch (jj_nt.kind) {
		case SUPPORTS: {
			supported_interface_spec();
			break;
		}
		default:
			jj_la1[104] = jj_gen;
			;
		}
		jj_consume_token(MANAGES);
		scoped_name();
		switch (jj_nt.kind) {
		case PRIMARYKEY: {
			primary_key_spec();
			break;
		}
		default:
			jj_la1[105] = jj_gen;
			;
		}
		{
			if (true)
				throw new UnsupportedOperationException();
		}
	}

	/* Production 128 */
	final public void home_inheritance_spec() throws ParseException {
		jj_consume_token(79);
		scoped_name();
		{
			if (true)
				throw new UnsupportedOperationException();
		}
	}

	/* Production 129 */
	final public void primary_key_spec() throws ParseException {
		jj_consume_token(PRIMARYKEY);
		scoped_name();
		{
			if (true)
				throw new UnsupportedOperationException();
		}
	}

	/* Production 130 */
	final public void home_body(Scope scope) throws ParseException {
		jj_consume_token(77);
		label_27: while (true) {
			switch (jj_nt.kind) {
			case EXCEPTION:
			case ANY:
			case TYPEDEF:
			case ATTRIBUTE:
			case ENUM:
			case TYPEID:
			case BOOLEAN:
			case LONG:
			case TYPEPREFIX:
			case FACTORY:
			case READONLY:
			case UNSIGNED:
			case CHAR:
			case UNION:
			case FINDER:
			case NATIVE:
			case CONST:
			case SHORT:
			case VALUE_BASE:
			case FLOAT:
			case OCTET:
			case IDL_STRING:
			case ONEWAY:
			case STRUCT:
			case VOID:
			case WCHAR:
			case DOUBLE:
			case OBJECT:
			case 81:
			case ID: {
				;
				break;
			}
			default:
				jj_la1[106] = jj_gen;
				break label_27;
			}
			home_export(scope);
		}
		jj_consume_token(78);
	}

	/* Production 131 */
	final public void home_export(Scope scope) throws ParseException {
		switch (jj_nt.kind) {
		case EXCEPTION:
		case ANY:
		case TYPEDEF:
		case ATTRIBUTE:
		case ENUM:
		case TYPEID:
		case BOOLEAN:
		case LONG:
		case TYPEPREFIX:
		case READONLY:
		case UNSIGNED:
		case CHAR:
		case UNION:
		case NATIVE:
		case CONST:
		case SHORT:
		case VALUE_BASE:
		case FLOAT:
		case OCTET:
		case IDL_STRING:
		case ONEWAY:
		case STRUCT:
		case VOID:
		case WCHAR:
		case DOUBLE:
		case OBJECT:
		case 81:
		case ID: {
			export(scope);
			break;
		}
		case FACTORY: {
			factory_dcl(scope);
			jj_consume_token(76);
			break;
		}
		case FINDER: {
			finder_dcl(scope);
			jj_consume_token(76);
			break;
		}
		default:
			jj_la1[107] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
	}

	/* Production 132 */
	final public void factory_dcl(Scope scope) throws ParseException {
		jj_consume_token(FACTORY);
		identifier();
		jj_consume_token(82);
		switch (jj_nt.kind) {
		case IN: {
			init_param_decls(scope);
			break;
		}
		default:
			jj_la1[108] = jj_gen;
			;
		}
		jj_consume_token(83);
		switch (jj_nt.kind) {
		case RAISES: {
			raises_expr(scope);
			break;
		}
		default:
			jj_la1[109] = jj_gen;
			;
		}
		{
			if (true)
				throw new UnsupportedOperationException();
		}
	}

	/* Production 133 */
	final public void finder_dcl(Scope scope) throws ParseException {
		jj_consume_token(FINDER);
		identifier();
		jj_consume_token(82);
		switch (jj_nt.kind) {
		case IN: {
			init_param_decls(scope);
			break;
		}
		default:
			jj_la1[110] = jj_gen;
			;
		}
		jj_consume_token(83);
		switch (jj_nt.kind) {
		case RAISES: {
			raises_expr(scope);
			break;
		}
		default:
			jj_la1[111] = jj_gen;
			;
		}
		{
			if (true)
				throw new UnsupportedOperationException();
		}
	}

	/* Production 134 */
	final public Definition event(Scope scope) throws ParseException {
		Definition retVal = null;
		if (jj_2_17(3)) {
			if (jj_2_16(3)) {
				event_dcl(scope);
			} else {
				switch (jj_nt.kind) {
				case ABSTRACT: {
					event_abs_dcl(scope);
					break;
				}
				default:
					jj_la1[112] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
				}
			}
		} else {
			switch (jj_nt.kind) {
			case ABSTRACT:
			case EVENTTYPE: {
				event_forward_dcl();
				break;
			}
			default:
				jj_la1[113] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	/* Production 135 */
	final public void event_forward_dcl() throws ParseException {
		switch (jj_nt.kind) {
		case ABSTRACT: {
			jj_consume_token(ABSTRACT);
			break;
		}
		default:
			jj_la1[114] = jj_gen;
			;
		}
		jj_consume_token(EVENTTYPE);
		identifier();
		{
			if (true)
				throw new UnsupportedOperationException();
		}
	}

	/* Production 136 */
	final public void event_abs_dcl(Scope scope) throws ParseException {
		jj_consume_token(ABSTRACT);
		jj_consume_token(EVENTTYPE);
		identifier();
		switch (jj_nt.kind) {
		case 79: {
			value_inheritance_spec(scope);
			break;
		}
		default:
			jj_la1[115] = jj_gen;
			;
		}
		jj_consume_token(77);
		label_28: while (true) {
			switch (jj_nt.kind) {
			case EXCEPTION:
			case ANY:
			case TYPEDEF:
			case ATTRIBUTE:
			case ENUM:
			case TYPEID:
			case BOOLEAN:
			case LONG:
			case TYPEPREFIX:
			case READONLY:
			case UNSIGNED:
			case CHAR:
			case UNION:
			case NATIVE:
			case CONST:
			case SHORT:
			case VALUE_BASE:
			case FLOAT:
			case OCTET:
			case IDL_STRING:
			case ONEWAY:
			case STRUCT:
			case VOID:
			case WCHAR:
			case DOUBLE:
			case OBJECT:
			case 81:
			case ID: {
				;
				break;
			}
			default:
				jj_la1[116] = jj_gen;
				break label_28;
			}
			export(scope);
		}
		jj_consume_token(78);
		{
			if (true)
				throw new UnsupportedOperationException();
		}
	}

	/* Production 137 */
	final public void event_dcl(Scope scope) throws ParseException {
		event_header(scope);
		jj_consume_token(77);
		label_29: while (true) {
			switch (jj_nt.kind) {
			case EXCEPTION:
			case ANY:
			case PUBLIC:
			case TYPEDEF:
			case ATTRIBUTE:
			case ENUM:
			case TYPEID:
			case BOOLEAN:
			case LONG:
			case TYPEPREFIX:
			case FACTORY:
			case READONLY:
			case UNSIGNED:
			case CHAR:
			case UNION:
			case NATIVE:
			case CONST:
			case SHORT:
			case VALUE_BASE:
			case FLOAT:
			case OCTET:
			case IDL_STRING:
			case ONEWAY:
			case STRUCT:
			case VOID:
			case WCHAR:
			case DOUBLE:
			case PRIVATE:
			case OBJECT:
			case 81:
			case ID: {
				;
				break;
			}
			default:
				jj_la1[117] = jj_gen;
				break label_29;
			}
			value_element(scope);
		}
		jj_consume_token(78);
	}

	/* Production 138 */
	final public void event_header(Scope scope) throws ParseException {
		switch (jj_nt.kind) {
		case CUSTOM: {
			jj_consume_token(CUSTOM);
			break;
		}
		default:
			jj_la1[118] = jj_gen;
			;
		}
		jj_consume_token(EVENTTYPE);
		identifier();
		switch (jj_nt.kind) {
		case 79: {
			value_inheritance_spec(scope);
			break;
		}
		default:
			jj_la1[119] = jj_gen;
			;
		}
		{
			if (true)
				throw new UnsupportedOperationException();
		}
	}

	final public void identifiableElement(Identifiable element) throws ParseException {
		jj_consume_token(ID);
		element.setName(token.image);
		if (element instanceof Definition) {
			((Definition) element).setPrefix(getPrefix());
		}
	}

	final public String identifier() throws ParseException {
		jj_consume_token(ID);
		String id = token.image;
		for (String str : IDLParserConstants.tokenImage) {
			if (str.equalsIgnoreCase(id)) {
				{
					if (true)
						throw new ParseException("Identifier matches reserved word: " + str);
				}
			}
		}
		{
			if ("" != null)
				return token.image;
		}
		throw new Error("Missing return statement in function");
	}

	final public IntegerLiteral integer_literal() throws ParseException {
		IntegerLiteral retVal = ExpressionsFactory.eINSTANCE.createIntegerLiteral();
		switch (jj_nt.kind) {
		case OCTALINT: {
			jj_consume_token(OCTALINT);
			retVal.setValue(Integer.valueOf(token.image, 8));
			break;
		}
		case DECIMALINT: {
			jj_consume_token(DECIMALINT);
			retVal.setValue(Integer.valueOf(token.image, 10));
			break;
		}
		case HEXADECIMALINT: {
			jj_consume_token(HEXADECIMALINT);
			retVal.setValue(Integer.valueOf(token.image.substring(2), 15));
			break;
		}
		default:
			jj_la1[120] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		retVal.setStartLine(token.beginLine);
		retVal.setStartColumn(token.beginColumn);
		retVal.setEndLine(token.endLine);
		retVal.setEndColumn(token.endColumn);
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	final public StringLiteral string_literal() throws ParseException {
		StringLiteral retVal = ExpressionsFactory.eINSTANCE.createStringLiteral();
		jj_consume_token(STRING);
		retVal.setStartLine(token.beginLine);
		retVal.setStartColumn(token.beginColumn);
		retVal.setEndLine(token.endLine);
		retVal.setEndColumn(token.endColumn);
		retVal.setValue(token.image.substring(1, token.image.length() - 1));
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	final public WideStringLiteral wide_string_literal() throws ParseException {
		WideStringLiteral retVal = ExpressionsFactory.eINSTANCE.createWideStringLiteral();
		jj_consume_token(WSTRING_LITERAL);
		retVal.setStartLine(token.beginLine);
		retVal.setStartColumn(token.beginColumn);
		retVal.setEndLine(token.endLine);
		retVal.setEndColumn(token.endColumn);
		retVal.setValue(token.image.substring(2, token.image.length() - 1));
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	final public CharacterLiteral character_literal() throws ParseException {
		CharacterLiteral retVal = ExpressionsFactory.eINSTANCE.createCharacterLiteral();
		jj_consume_token(CHARACTER);
		retVal.setStartLine(token.beginLine);
		retVal.setStartColumn(token.beginColumn);
		retVal.setEndLine(token.endLine);
		retVal.setEndColumn(token.endColumn);
		retVal.setValue(token.image.charAt(1));
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	final public WideCharacterLiteral wide_character_literal() throws ParseException {
		WideCharacterLiteral retVal = ExpressionsFactory.eINSTANCE.createWideCharacterLiteral();
		jj_consume_token(WCHARACTER);
		retVal.setStartLine(token.beginLine);
		retVal.setStartColumn(token.beginColumn);
		retVal.setEndLine(token.endLine);
		retVal.setEndColumn(token.endColumn);
		retVal.setValue(token.image.charAt(2));
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	final public FixedPtLiteral fixed_pt_literal() throws ParseException {
		FixedPtLiteral retVal = ExpressionsFactory.eINSTANCE.createFixedPtLiteral();
		jj_consume_token(FIXED_PT);
		retVal.setStartLine(token.beginLine);
		retVal.setStartColumn(token.beginColumn);
		retVal.setEndLine(token.endLine);
		retVal.setEndColumn(token.endColumn);
		retVal.setValue(token.image);
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	final public FloatingPointLiteral floating_pt_literal() throws ParseException {
		FloatingPointLiteral retVal = ExpressionsFactory.eINSTANCE.createFloatingPointLiteral();
		switch (jj_nt.kind) {
		case FLOATONE: {
			jj_consume_token(FLOATONE);
			retVal.setValue(java.lang.Float.valueOf(token.image));
			break;
		}
		case FLOATTWO: {
			jj_consume_token(FLOATTWO);
			retVal.setValue(java.lang.Float.valueOf(token.image));
			break;
		}
		default:
			jj_la1[121] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		retVal.setStartLine(token.beginLine);
		retVal.setStartColumn(token.beginColumn);
		retVal.setEndLine(token.endLine);
		retVal.setEndColumn(token.endColumn);
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	final public UnionForwardDcl union_forward_dcl(Scope parent) throws ParseException {
		UnionForwardDcl retVal = TypesFactory.eINSTANCE.createUnionForwardDcl();
		int startLine = 0;
		int startColumn = 0;
		int endLine = 0;
		int endColumn = 0;
		Comment comment = popComment();
		jj_consume_token(UNION);
		startLine = token.beginLine;
		startColumn = token.beginColumn;
		identifiableElement(retVal);
		endLine = token.endLine;
		endColumn = token.endColumn;
		retVal.setStartLine(startLine);
		retVal.setStartColumn(startColumn);
		retVal.setEndLine(endLine);
		retVal.setEndColumn(endColumn);
		UnionType unionStub = TypesFactory.eINSTANCE.createUnionType();
		unionStub.setName(retVal.getName());
		unionStub.setForwardDcl(retVal);
		retVal.setImplementation(unionStub);
		retVal.setComment(comment);
		Scope interfaceScope = new Scope(unionStub, parent, token);
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	final public StructForwardDcl struct_forward_dcl(Scope parent) throws ParseException {
		StructForwardDcl retVal = TypesFactory.eINSTANCE.createStructForwardDcl();
		int startLine = 0;
		int startColumn = 0;
		int endLine = 0;
		int endColumn = 0;
		Comment comment = popComment();
		jj_consume_token(STRUCT);
		startLine = token.beginLine;
		startColumn = token.beginColumn;
		identifiableElement(retVal);
		endLine = token.endLine;
		endColumn = token.endColumn;
		retVal.setStartLine(startLine);
		retVal.setStartColumn(startColumn);
		retVal.setEndLine(endLine);
		retVal.setEndColumn(endColumn);
		StructType structStub = TypesFactory.eINSTANCE.createStructType();
		structStub.setName(retVal.getName());
		structStub.setForwardDcl(retVal);
		retVal.setComment(comment);
		retVal.setImplementation(structStub);
		Scope interfaceScope = new Scope(structStub, parent, token);
		{
			if ("" != null)
				return retVal;
		}
		throw new Error("Missing return statement in function");
	}

	private boolean jj_2_1(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_1();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(0, xla);
		}
	}

	private boolean jj_2_2(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_2();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(1, xla);
		}
	}

	private boolean jj_2_3(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_3();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(2, xla);
		}
	}

	private boolean jj_2_4(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_4();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(3, xla);
		}
	}

	private boolean jj_2_5(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_5();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(4, xla);
		}
	}

	private boolean jj_2_6(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_6();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(5, xla);
		}
	}

	private boolean jj_2_7(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_7();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(6, xla);
		}
	}

	private boolean jj_2_8(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_8();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(7, xla);
		}
	}

	private boolean jj_2_9(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_9();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(8, xla);
		}
	}

	private boolean jj_2_10(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_10();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(9, xla);
		}
	}

	private boolean jj_2_11(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_11();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(10, xla);
		}
	}

	private boolean jj_2_12(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_12();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(11, xla);
		}
	}

	private boolean jj_2_13(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_13();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(12, xla);
		}
	}

	private boolean jj_2_14(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_14();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(13, xla);
		}
	}

	private boolean jj_2_15(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_15();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(14, xla);
		}
	}

	private boolean jj_2_16(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_16();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(15, xla);
		}
	}

	private boolean jj_2_17(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_17();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(16, xla);
		}
	}

	private boolean jj_3R_43() {
		if (jj_scan_token(UNION))
			return true;
		if (jj_3R_52())
			return true;
		if (jj_3R_61())
			return true;
		return false;
	}

	private boolean jj_3R_256() {
		if (jj_scan_token(90))
			return true;
		return false;
	}

	private boolean jj_3R_65() {
		if (jj_3R_77())
			return true;
		return false;
	}

	private boolean jj_3R_250() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_256()) {
			jj_scanpos = xsp;
			if (jj_3R_257())
				return true;
		}
		if (jj_3R_245())
			return true;
		return false;
	}

	private boolean jj_3_5() {
		if (jj_3R_34())
			return true;
		return false;
	}

	private boolean jj_3R_166() {
		if (jj_scan_token(VALUE_BASE))
			return true;
		return false;
	}

	private boolean jj_3R_136() {
		if (jj_scan_token(READONLY))
			return true;
		return false;
	}

	private boolean jj_3R_47() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_5()) {
			jj_scanpos = xsp;
			if (jj_3R_65())
				return true;
		}
		return false;
	}

	private boolean jj_3R_35() {
		if (jj_3R_54())
			return true;
		return false;
	}

	private boolean jj_3R_108() {
		if (jj_3R_123())
			return true;
		return false;
	}

	private boolean jj_3R_107() {
		if (jj_3R_43())
			return true;
		return false;
	}

	private boolean jj_3R_117() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_136())
			jj_scanpos = xsp;
		if (jj_scan_token(ATTRIBUTE))
			return true;
		if (jj_3R_178())
			return true;
		if (jj_3R_179())
			return true;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_180()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3_4() {
		if (jj_3R_33())
			return true;
		return false;
	}

	private boolean jj_3R_106() {
		if (jj_3R_42())
			return true;
		return false;
	}

	private boolean jj_3R_85() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_106()) {
			jj_scanpos = xsp;
			if (jj_3R_107()) {
				jj_scanpos = xsp;
				if (jj_3R_108())
					return true;
			}
		}
		return false;
	}

	private boolean jj_3R_245() {
		if (jj_3R_249())
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_250())
			jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3_6() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_4()) {
			jj_scanpos = xsp;
			if (jj_3R_35())
				return true;
		}
		return false;
	}

	private boolean jj_3R_30() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_6()) {
			jj_scanpos = xsp;
			if (jj_3R_47())
				return true;
		}
		return false;
	}

	private boolean jj_3R_217() {
		if (jj_scan_token(FIXED))
			return true;
		return false;
	}

	private boolean jj_3R_150() {
		if (jj_3R_170())
			return true;
		return false;
	}

	private boolean jj_3R_149() {
		if (jj_3R_169())
			return true;
		return false;
	}

	private boolean jj_3R_148() {
		if (jj_3R_168())
			return true;
		return false;
	}

	private boolean jj_3R_147() {
		if (jj_3R_167())
			return true;
		return false;
	}

	private boolean jj_3R_89() {
		if (jj_scan_token(98))
			return true;
		if (jj_3R_232())
			return true;
		if (jj_scan_token(99))
			return true;
		return false;
	}

	private boolean jj_3R_122() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_147()) {
			jj_scanpos = xsp;
			if (jj_3R_148()) {
				jj_scanpos = xsp;
				if (jj_3R_149()) {
					jj_scanpos = xsp;
					if (jj_3R_150())
						return true;
				}
			}
		}
		return false;
	}

	private boolean jj_3R_202() {
		if (jj_3R_53())
			return true;
		if (jj_3R_171())
			return true;
		if (jj_scan_token(76))
			return true;
		return false;
	}

	private boolean jj_3R_174() {
		if (jj_scan_token(81))
			return true;
		if (jj_3R_62())
			return true;
		return false;
	}

	private boolean jj_3R_252() {
		if (jj_scan_token(89))
			return true;
		return false;
	}

	private boolean jj_3R_146() {
		if (jj_3R_166())
			return true;
		return false;
	}

	private boolean jj_3R_145() {
		if (jj_3R_165())
			return true;
		return false;
	}

	private boolean jj_3R_144() {
		if (jj_3R_164())
			return true;
		return false;
	}

	private boolean jj_3R_75() {
		if (jj_3R_89())
			return true;
		return false;
	}

	private boolean jj_3R_143() {
		if (jj_3R_163())
			return true;
		return false;
	}

	private boolean jj_3R_251() {
		if (jj_scan_token(88))
			return true;
		return false;
	}

	private boolean jj_3R_130() {
		if (jj_scan_token(81))
			return true;
		return false;
	}

	private boolean jj_3R_142() {
		if (jj_3R_162())
			return true;
		return false;
	}

	private boolean jj_3R_141() {
		if (jj_3R_161())
			return true;
		return false;
	}

	private boolean jj_3R_140() {
		if (jj_3R_160())
			return true;
		return false;
	}

	private boolean jj_3R_60() {
		if (jj_3R_52())
			return true;
		Token xsp;
		if (jj_3R_75())
			return true;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_75()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_246() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_251()) {
			jj_scanpos = xsp;
			if (jj_3R_252())
				return true;
		}
		if (jj_3R_239())
			return true;
		return false;
	}

	private boolean jj_3R_113() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_130())
			jj_scanpos = xsp;
		if (jj_3R_62())
			return true;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_174()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_139() {
		if (jj_3R_36())
			return true;
		return false;
	}

	private boolean jj_3R_170() {
		if (jj_scan_token(FIXED))
			return true;
		if (jj_scan_token(96))
			return true;
		if (jj_3R_232())
			return true;
		if (jj_scan_token(80))
			return true;
		if (jj_3R_232())
			return true;
		if (jj_scan_token(97))
			return true;
		return false;
	}

	private boolean jj_3_8() {
		if (jj_3R_37())
			return true;
		return false;
	}

	private boolean jj_3R_121() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_8()) {
			jj_scanpos = xsp;
			if (jj_3R_139()) {
				jj_scanpos = xsp;
				if (jj_3R_140()) {
					jj_scanpos = xsp;
					if (jj_3R_141()) {
						jj_scanpos = xsp;
						if (jj_3R_142()) {
							jj_scanpos = xsp;
							if (jj_3R_143()) {
								jj_scanpos = xsp;
								if (jj_3R_144()) {
									jj_scanpos = xsp;
									if (jj_3R_145()) {
										jj_scanpos = xsp;
										if (jj_3R_146())
											return true;
									}
								}
							}
						}
					}
				}
			}
		}
		return false;
	}

	private boolean jj_3R_223() {
		if (jj_3R_202())
			return true;
		return false;
	}

	private boolean jj_3R_239() {
		if (jj_3R_245())
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_246())
			jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3R_208() {
		Token xsp;
		if (jj_3R_223())
			return true;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_223()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_95() {
		if (jj_3R_113())
			return true;
		return false;
	}

	private boolean jj_3R_227() {
		if (jj_scan_token(96))
			return true;
		if (jj_3R_232())
			return true;
		if (jj_scan_token(97))
			return true;
		return false;
	}

	private boolean jj_3R_205() {
		if (jj_3R_113())
			return true;
		return false;
	}

	private boolean jj_3R_105() {
		if (jj_3R_113())
			return true;
		return false;
	}

	private boolean jj_3R_204() {
		if (jj_3R_168())
			return true;
		return false;
	}

	private boolean jj_3R_104() {
		if (jj_3R_122())
			return true;
		return false;
	}

	private boolean jj_3R_203() {
		if (jj_3R_121())
			return true;
		return false;
	}

	private boolean jj_3R_103() {
		if (jj_3R_121())
			return true;
		return false;
	}

	private boolean jj_3R_178() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_203()) {
			jj_scanpos = xsp;
			if (jj_3R_204()) {
				jj_scanpos = xsp;
				if (jj_3R_205())
					return true;
			}
		}
		return false;
	}

	private boolean jj_3R_84() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_103()) {
			jj_scanpos = xsp;
			if (jj_3R_104()) {
				jj_scanpos = xsp;
				if (jj_3R_105())
					return true;
			}
		}
		return false;
	}

	private boolean jj_3R_169() {
		if (jj_scan_token(WSTRING))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_227())
			jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3R_240() {
		if (jj_scan_token(87))
			return true;
		if (jj_3R_228())
			return true;
		return false;
	}

	private boolean jj_3R_81() {
		if (jj_scan_token(79))
			return true;
		if (jj_3R_95())
			return true;
		return false;
	}

	private boolean jj_3R_72() {
		if (jj_3R_85())
			return true;
		return false;
	}

	private boolean jj_3R_71() {
		if (jj_3R_84())
			return true;
		return false;
	}

	private boolean jj_3R_222() {
		if (jj_scan_token(80))
			return true;
		if (jj_3R_184())
			return true;
		return false;
	}

	private boolean jj_3R_53() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_71()) {
			jj_scanpos = xsp;
			if (jj_3R_72())
				return true;
		}
		return false;
	}

	private boolean jj_3R_228() {
		if (jj_3R_239())
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_240())
			jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3R_226() {
		if (jj_scan_token(96))
			return true;
		if (jj_3R_232())
			return true;
		if (jj_scan_token(97))
			return true;
		return false;
	}

	private boolean jj_3R_211() {
		if (jj_scan_token(STRUCT))
			return true;
		if (jj_3R_52())
			return true;
		return false;
	}

	private boolean jj_3R_207() {
		if (jj_scan_token(CONTEXT))
			return true;
		if (jj_scan_token(82))
			return true;
		if (jj_3R_184())
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_222()) {
				jj_scanpos = xsp;
				break;
			}
		}
		if (jj_scan_token(83))
			return true;
		return false;
	}

	private boolean jj_3R_168() {
		if (jj_scan_token(IDL_STRING))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_226())
			jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3R_102() {
		if (jj_3R_120())
			return true;
		if (jj_scan_token(76))
			return true;
		return false;
	}

	private boolean jj_3R_101() {
		if (jj_3R_119())
			return true;
		if (jj_scan_token(76))
			return true;
		return false;
	}

	private boolean jj_3R_100() {
		if (jj_3R_118())
			return true;
		if (jj_scan_token(76))
			return true;
		return false;
	}

	private boolean jj_3R_42() {
		if (jj_scan_token(STRUCT))
			return true;
		if (jj_3R_52())
			return true;
		if (jj_scan_token(77))
			return true;
		if (jj_3R_208())
			return true;
		if (jj_scan_token(78))
			return true;
		return false;
	}

	private boolean jj_3R_99() {
		if (jj_3R_117())
			return true;
		if (jj_scan_token(76))
			return true;
		return false;
	}

	private boolean jj_3R_98() {
		if (jj_3R_116())
			return true;
		if (jj_scan_token(76))
			return true;
		return false;
	}

	private boolean jj_3R_97() {
		if (jj_3R_115())
			return true;
		if (jj_scan_token(76))
			return true;
		return false;
	}

	private boolean jj_3R_96() {
		if (jj_3R_114())
			return true;
		if (jj_scan_token(76))
			return true;
		return false;
	}

	private boolean jj_3R_82() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_96()) {
			jj_scanpos = xsp;
			if (jj_3R_97()) {
				jj_scanpos = xsp;
				if (jj_3R_98()) {
					jj_scanpos = xsp;
					if (jj_3R_99()) {
						jj_scanpos = xsp;
						if (jj_3R_100()) {
							jj_scanpos = xsp;
							if (jj_3R_101()) {
								jj_scanpos = xsp;
								if (jj_3R_102())
									return true;
							}
						}
					}
				}
			}
		}
		return false;
	}

	private boolean jj_3R_229() {
		if (jj_scan_token(86))
			return true;
		if (jj_3R_218())
			return true;
		return false;
	}

	private boolean jj_3R_216() {
		if (jj_scan_token(80))
			return true;
		if (jj_3R_113())
			return true;
		return false;
	}

	private boolean jj_3R_191() {
		if (jj_3R_53())
			return true;
		if (jj_3R_171())
			return true;
		return false;
	}

	private boolean jj_3R_231() {
		if (jj_scan_token(80))
			return true;
		if (jj_3R_232())
			return true;
		return false;
	}

	private boolean jj_3R_218() {
		if (jj_3R_228())
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_229())
			jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3R_165() {
		if (jj_scan_token(OBJECT))
			return true;
		return false;
	}

	private boolean jj_3R_190() {
		if (jj_scan_token(RAISES))
			return true;
		if (jj_scan_token(82))
			return true;
		if (jj_3R_113())
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_216()) {
				jj_scanpos = xsp;
				break;
			}
		}
		if (jj_scan_token(83))
			return true;
		return false;
	}

	private boolean jj_3R_212() {
		if (jj_scan_token(UNION))
			return true;
		if (jj_3R_52())
			return true;
		return false;
	}

	private boolean jj_3R_167() {
		if (jj_scan_token(SEQUENCE))
			return true;
		if (jj_scan_token(96))
			return true;
		if (jj_3R_84())
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_231())
			jj_scanpos = xsp;
		if (jj_scan_token(97))
			return true;
		return false;
	}

	private boolean jj_3R_164() {
		if (jj_scan_token(ANY))
			return true;
		return false;
	}

	private boolean jj_3R_156() {
		if (jj_scan_token(NATIVE))
			return true;
		if (jj_3R_179())
			return true;
		return false;
	}

	private boolean jj_3R_69() {
		if (jj_3R_82())
			return true;
		return false;
	}

	private boolean jj_3R_50() {
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_69()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_243() {
		if (jj_scan_token(INOUT))
			return true;
		return false;
	}

	private boolean jj_3R_242() {
		if (jj_scan_token(OUT))
			return true;
		return false;
	}

	private boolean jj_3R_163() {
		if (jj_scan_token(OCTET))
			return true;
		return false;
	}

	private boolean jj_3R_219() {
		if (jj_scan_token(85))
			return true;
		if (jj_3R_201())
			return true;
		return false;
	}

	private boolean jj_3R_241() {
		if (jj_scan_token(IN))
			return true;
		return false;
	}

	private boolean jj_3R_230() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_241()) {
			jj_scanpos = xsp;
			if (jj_3R_242()) {
				jj_scanpos = xsp;
				if (jj_3R_243())
					return true;
			}
		}
		return false;
	}

	private boolean jj_3R_135() {
		if (jj_3R_156())
			return true;
		return false;
	}

	private boolean jj_3R_134() {
		if (jj_3R_123())
			return true;
		return false;
	}

	private boolean jj_3R_292() {
		if (jj_scan_token(FLOATTWO))
			return true;
		return false;
	}

	private boolean jj_3R_133() {
		if (jj_3R_155())
			return true;
		return false;
	}

	private boolean jj_3R_201() {
		if (jj_3R_218())
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_219())
			jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3R_132() {
		if (jj_3R_154())
			return true;
		return false;
	}

	private boolean jj_3R_68() {
		if (jj_3R_81())
			return true;
		return false;
	}

	private boolean jj_3R_131() {
		if (jj_scan_token(TYPEDEF))
			return true;
		if (jj_3R_191())
			return true;
		return false;
	}

	private boolean jj_3R_162() {
		if (jj_scan_token(BOOLEAN))
			return true;
		return false;
	}

	private boolean jj_3R_291() {
		if (jj_scan_token(FLOATONE))
			return true;
		return false;
	}

	private boolean jj_3R_114() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_131()) {
			jj_scanpos = xsp;
			if (jj_3R_132()) {
				jj_scanpos = xsp;
				if (jj_3R_133()) {
					jj_scanpos = xsp;
					if (jj_3R_134()) {
						jj_scanpos = xsp;
						if (jj_3R_135())
							return true;
					}
				}
			}
		}
		return false;
	}

	private boolean jj_3R_286() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_291()) {
			jj_scanpos = xsp;
			if (jj_3R_292())
				return true;
		}
		return false;
	}

	private boolean jj_3R_209() {
		if (jj_3R_52())
			return true;
		return false;
	}

	private boolean jj_3R_161() {
		if (jj_scan_token(WCHAR))
			return true;
		return false;
	}

	private boolean jj_3R_176() {
		if (jj_3R_201())
			return true;
		return false;
	}

	private boolean jj_3R_80() {
		if (jj_scan_token(LOCAL))
			return true;
		return false;
	}

	private boolean jj_3R_232() {
		if (jj_3R_176())
			return true;
		return false;
	}

	private boolean jj_3R_79() {
		if (jj_scan_token(ABSTRACT))
			return true;
		return false;
	}

	private boolean jj_3R_67() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_79()) {
			jj_scanpos = xsp;
			if (jj_3R_80())
				return true;
		}
		return false;
	}

	private boolean jj_3R_220() {
		if (jj_3R_230())
			return true;
		if (jj_3R_178())
			return true;
		if (jj_3R_179())
			return true;
		return false;
	}

	private boolean jj_3R_49() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_67())
			jj_scanpos = xsp;
		if (jj_scan_token(INTERFACE))
			return true;
		if (jj_3R_52())
			return true;
		xsp = jj_scanpos;
		if (jj_3R_68())
			jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3R_285() {
		if (jj_scan_token(FIXED_PT))
			return true;
		return false;
	}

	private boolean jj_3R_160() {
		if (jj_scan_token(CHAR))
			return true;
		return false;
	}

	private boolean jj_3R_200() {
		if (jj_3R_113())
			return true;
		return false;
	}

	private boolean jj_3R_199() {
		if (jj_3R_163())
			return true;
		return false;
	}

	private boolean jj_3R_198() {
		if (jj_3R_217())
			return true;
		return false;
	}

	private boolean jj_3R_197() {
		if (jj_3R_169())
			return true;
		return false;
	}

	private boolean jj_3R_196() {
		if (jj_3R_168())
			return true;
		return false;
	}

	private boolean jj_3R_195() {
		if (jj_3R_162())
			return true;
		return false;
	}

	private boolean jj_3R_40() {
		if (jj_scan_token(UNSIGNED))
			return true;
		if (jj_scan_token(LONG))
			return true;
		if (jj_scan_token(LONG))
			return true;
		return false;
	}

	private boolean jj_3R_194() {
		if (jj_3R_161())
			return true;
		return false;
	}

	private boolean jj_3R_210() {
		if (jj_scan_token(80))
			return true;
		if (jj_3R_209())
			return true;
		return false;
	}

	private boolean jj_3R_193() {
		if (jj_3R_160())
			return true;
		return false;
	}

	private boolean jj_3R_294() {
		if (jj_scan_token(FALSE))
			return true;
		return false;
	}

	private boolean jj_3R_192() {
		if (jj_3R_37())
			return true;
		return false;
	}

	private boolean jj_3R_183() {
		if (jj_3R_207())
			return true;
		return false;
	}

	private boolean jj_3_7() {
		if (jj_3R_36())
			return true;
		return false;
	}

	private boolean jj_3R_284() {
		if (jj_scan_token(WCHARACTER))
			return true;
		return false;
	}

	private boolean jj_3R_44() {
		if (jj_scan_token(COMPONENT))
			return true;
		if (jj_3R_62())
			return true;
		return false;
	}

	private boolean jj_3R_175() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_7()) {
			jj_scanpos = xsp;
			if (jj_3R_192()) {
				jj_scanpos = xsp;
				if (jj_3R_193()) {
					jj_scanpos = xsp;
					if (jj_3R_194()) {
						jj_scanpos = xsp;
						if (jj_3R_195()) {
							jj_scanpos = xsp;
							if (jj_3R_196()) {
								jj_scanpos = xsp;
								if (jj_3R_197()) {
									jj_scanpos = xsp;
									if (jj_3R_198()) {
										jj_scanpos = xsp;
										if (jj_3R_199()) {
											jj_scanpos = xsp;
											if (jj_3R_200())
												return true;
										}
									}
								}
							}
						}
					}
				}
			}
		}
		return false;
	}

	private boolean jj_3R_221() {
		if (jj_scan_token(80))
			return true;
		if (jj_3R_220())
			return true;
		return false;
	}

	private boolean jj_3R_41() {
		if (jj_scan_token(UNSIGNED))
			return true;
		if (jj_scan_token(LONG))
			return true;
		return false;
	}

	private boolean jj_3R_293() {
		if (jj_scan_token(TRUE))
			return true;
		return false;
	}

	private boolean jj_3R_287() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_293()) {
			jj_scanpos = xsp;
			if (jj_3R_294())
				return true;
		}
		return false;
	}

	private boolean jj_3R_123() {
		if (jj_scan_token(ENUM))
			return true;
		if (jj_3R_52())
			return true;
		if (jj_scan_token(77))
			return true;
		if (jj_3R_209())
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_210()) {
				jj_scanpos = xsp;
				break;
			}
		}
		if (jj_scan_token(78))
			return true;
		return false;
	}

	private boolean jj_3R_206() {
		if (jj_3R_220())
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_221()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_173() {
		if (jj_3R_190())
			return true;
		return false;
	}

	private boolean jj_3_15() {
		if (jj_3R_44())
			return true;
		return false;
	}

	private boolean jj_3R_181() {
		if (jj_scan_token(82))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_206())
			jj_scanpos = xsp;
		if (jj_scan_token(83))
			return true;
		return false;
	}

	private boolean jj_3R_111() {
		if (jj_scan_token(UNSIGNED))
			return true;
		if (jj_scan_token(SHORT))
			return true;
		return false;
	}

	private boolean jj_3R_282() {
		if (jj_scan_token(CHARACTER))
			return true;
		return false;
	}

	private boolean jj_3R_280() {
		if (jj_3R_287())
			return true;
		return false;
	}

	private boolean jj_3R_279() {
		if (jj_3R_286())
			return true;
		return false;
	}

	private boolean jj_3R_278() {
		if (jj_3R_285())
			return true;
		return false;
	}

	private boolean jj_3R_277() {
		if (jj_3R_284())
			return true;
		return false;
	}

	private boolean jj_3R_276() {
		if (jj_3R_283())
			return true;
		return false;
	}

	private boolean jj_3R_88() {
		if (jj_3R_111())
			return true;
		return false;
	}

	private boolean jj_3R_275() {
		if (jj_3R_282())
			return true;
		return false;
	}

	private boolean jj_3R_94() {
		if (jj_scan_token(LOCAL))
			return true;
		return false;
	}

	private boolean jj_3R_274() {
		if (jj_3R_184())
			return true;
		return false;
	}

	private boolean jj_3_12() {
		if (jj_3R_41())
			return true;
		return false;
	}

	private boolean jj_3R_273() {
		if (jj_3R_281())
			return true;
		return false;
	}

	private boolean jj_3_11() {
		if (jj_3R_40())
			return true;
		return false;
	}

	private boolean jj_3R_248() {
		if (jj_3R_53())
			return true;
		if (jj_3R_187())
			return true;
		return false;
	}

	private boolean jj_3R_78() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_93()) {
			jj_scanpos = xsp;
			if (jj_3R_94())
				return true;
		}
		return false;
	}

	private boolean jj_3R_93() {
		if (jj_scan_token(ABSTRACT))
			return true;
		return false;
	}

	private boolean jj_3R_272() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_273()) {
			jj_scanpos = xsp;
			if (jj_3R_274()) {
				jj_scanpos = xsp;
				if (jj_3R_275()) {
					jj_scanpos = xsp;
					if (jj_3R_276()) {
						jj_scanpos = xsp;
						if (jj_3R_277()) {
							jj_scanpos = xsp;
							if (jj_3R_278()) {
								jj_scanpos = xsp;
								if (jj_3R_279()) {
									jj_scanpos = xsp;
									if (jj_3R_280())
										return true;
								}
							}
						}
					}
				}
			}
		}
		return false;
	}

	private boolean jj_3R_159() {
		if (jj_scan_token(VOID))
			return true;
		return false;
	}

	private boolean jj_3R_158() {
		if (jj_3R_178())
			return true;
		return false;
	}

	private boolean jj_3R_74() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_11()) {
			jj_scanpos = xsp;
			if (jj_3_12()) {
				jj_scanpos = xsp;
				if (jj_3R_88())
					return true;
			}
		}
		return false;
	}

	private boolean jj_3R_66() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_78())
			jj_scanpos = xsp;
		if (jj_scan_token(INTERFACE))
			return true;
		if (jj_3R_52())
			return true;
		return false;
	}

	private boolean jj_3R_283() {
		if (jj_scan_token(WSTRING_LITERAL))
			return true;
		return false;
	}

	private boolean jj_3R_115() {
		if (jj_scan_token(CONST))
			return true;
		if (jj_3R_175())
			return true;
		if (jj_3R_52())
			return true;
		if (jj_scan_token(84))
			return true;
		if (jj_3R_176())
			return true;
		return false;
	}

	private boolean jj_3R_138() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_158()) {
			jj_scanpos = xsp;
			if (jj_3R_159())
				return true;
		}
		return false;
	}

	private boolean jj_3R_182() {
		if (jj_3R_190())
			return true;
		return false;
	}

	private boolean jj_3R_39() {
		if (jj_scan_token(LONG))
			return true;
		if (jj_scan_token(LONG))
			return true;
		return false;
	}

	private boolean jj_3R_172() {
		if (jj_3R_189())
			return true;
		return false;
	}

	private boolean jj_3R_259() {
		if (jj_scan_token(_DEFAULT))
			return true;
		if (jj_scan_token(79))
			return true;
		return false;
	}

	private boolean jj_3R_157() {
		if (jj_scan_token(ONEWAY))
			return true;
		return false;
	}

	private boolean jj_3R_184() {
		if (jj_scan_token(STRING))
			return true;
		return false;
	}

	private boolean jj_3R_258() {
		if (jj_scan_token(CASE))
			return true;
		if (jj_3R_176())
			return true;
		if (jj_scan_token(79))
			return true;
		return false;
	}

	private boolean jj_3R_268() {
		if (jj_scan_token(82))
			return true;
		if (jj_3R_176())
			return true;
		if (jj_scan_token(83))
			return true;
		return false;
	}

	private boolean jj_3R_267() {
		if (jj_3R_272())
			return true;
		return false;
	}

	private boolean jj_3R_109() {
		if (jj_scan_token(LONG))
			return true;
		return false;
	}

	private boolean jj_3R_253() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_258()) {
			jj_scanpos = xsp;
			if (jj_3R_259())
				return true;
		}
		return false;
	}

	private boolean jj_3R_214() {
		if (jj_scan_token(71))
			return true;
		if (jj_3R_178())
			return true;
		if (jj_3R_179())
			return true;
		return false;
	}

	private boolean jj_3R_215() {
		if (jj_scan_token(80))
			return true;
		if (jj_3R_214())
			return true;
		return false;
	}

	private boolean jj_3R_266() {
		if (jj_3R_113())
			return true;
		return false;
	}

	private boolean jj_3R_110() {
		if (jj_scan_token(SHORT))
			return true;
		return false;
	}

	private boolean jj_3R_189() {
		if (jj_3R_214())
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_215()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_290() {
		if (jj_scan_token(HEXADECIMALINT))
			return true;
		return false;
	}

	private boolean jj_3R_261() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_266()) {
			jj_scanpos = xsp;
			if (jj_3R_267()) {
				jj_scanpos = xsp;
				if (jj_3R_268())
					return true;
			}
		}
		return false;
	}

	private boolean jj_3R_289() {
		if (jj_scan_token(DECIMALINT))
			return true;
		return false;
	}

	private boolean jj_3R_247() {
		if (jj_3R_253())
			return true;
		return false;
	}

	private boolean jj_3R_87() {
		if (jj_3R_110())
			return true;
		return false;
	}

	private boolean jj_3R_86() {
		if (jj_3R_109())
			return true;
		return false;
	}

	private boolean jj_3R_288() {
		if (jj_scan_token(OCTALINT))
			return true;
		return false;
	}

	private boolean jj_3R_244() {
		Token xsp;
		if (jj_3R_247())
			return true;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_247()) {
				jj_scanpos = xsp;
				break;
			}
		}
		if (jj_3R_248())
			return true;
		if (jj_scan_token(76))
			return true;
		return false;
	}

	private boolean jj_3R_32() {
		if (jj_3R_49())
			return true;
		if (jj_scan_token(77))
			return true;
		if (jj_3R_50())
			return true;
		if (jj_scan_token(78))
			return true;
		return false;
	}

	private boolean jj_3R_76() {
		if (jj_3R_83())
			return true;
		return false;
	}

	private boolean jj_3R_152() {
		if (jj_scan_token(FACTORY))
			return true;
		if (jj_3R_62())
			return true;
		if (jj_scan_token(82))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_172())
			jj_scanpos = xsp;
		if (jj_scan_token(83))
			return true;
		xsp = jj_scanpos;
		if (jj_3R_173())
			jj_scanpos = xsp;
		if (jj_scan_token(76))
			return true;
		return false;
	}

	private boolean jj_3_10() {
		if (jj_3R_39())
			return true;
		return false;
	}

	private boolean jj_3R_281() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_288()) {
			jj_scanpos = xsp;
			if (jj_3R_289()) {
				jj_scanpos = xsp;
				if (jj_3R_290())
					return true;
			}
		}
		return false;
	}

	private boolean jj_3R_73() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_10()) {
			jj_scanpos = xsp;
			if (jj_3R_86()) {
				jj_scanpos = xsp;
				if (jj_3R_87())
					return true;
			}
		}
		return false;
	}

	private boolean jj_3R_271() {
		if (jj_scan_token(95))
			return true;
		return false;
	}

	private boolean jj_3R_270() {
		if (jj_scan_token(90))
			return true;
		return false;
	}

	private boolean jj_3R_151() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(19)) {
			jj_scanpos = xsp;
			if (jj_scan_token(72))
				return true;
		}
		if (jj_3R_53())
			return true;
		if (jj_3R_171())
			return true;
		if (jj_scan_token(76))
			return true;
		return false;
	}

	private boolean jj_3R_70() {
		if (jj_3R_83())
			return true;
		return false;
	}

	private boolean jj_3R_269() {
		if (jj_scan_token(91))
			return true;
		return false;
	}

	private boolean jj_3R_265() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_269()) {
			jj_scanpos = xsp;
			if (jj_3R_270()) {
				jj_scanpos = xsp;
				if (jj_3R_271())
					return true;
			}
		}
		return false;
	}

	private boolean jj_3R_48() {
		if (jj_3R_66())
			return true;
		return false;
	}

	private boolean jj_3R_56() {
		if (jj_3R_74())
			return true;
		return false;
	}

	private boolean jj_3R_238() {
		if (jj_3R_244())
			return true;
		return false;
	}

	private boolean jj_3R_55() {
		if (jj_3R_73())
			return true;
		return false;
	}

	private boolean jj_3_3() {
		if (jj_3R_32())
			return true;
		return false;
	}

	private boolean jj_3R_137() {
		if (jj_3R_157())
			return true;
		return false;
	}

	private boolean jj_3R_225() {
		Token xsp;
		if (jj_3R_238())
			return true;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_238()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_126() {
		if (jj_3R_152())
			return true;
		return false;
	}

	private boolean jj_3R_36() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_55()) {
			jj_scanpos = xsp;
			if (jj_3R_56())
				return true;
		}
		return false;
	}

	private boolean jj_3R_31() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_3()) {
			jj_scanpos = xsp;
			if (jj_3R_48())
				return true;
		}
		return false;
	}

	private boolean jj_3R_125() {
		if (jj_3R_151())
			return true;
		return false;
	}

	private boolean jj_3R_118() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_137())
			jj_scanpos = xsp;
		if (jj_3R_138())
			return true;
		if (jj_3R_52())
			return true;
		if (jj_3R_181())
			return true;
		xsp = jj_scanpos;
		if (jj_3R_182())
			jj_scanpos = xsp;
		xsp = jj_scanpos;
		if (jj_3R_183())
			jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3R_112() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_124()) {
			jj_scanpos = xsp;
			if (jj_3R_125()) {
				jj_scanpos = xsp;
				if (jj_3R_126())
					return true;
			}
		}
		return false;
	}

	private boolean jj_3R_124() {
		if (jj_3R_82())
			return true;
		return false;
	}

	private boolean jj_3R_62() {
		if (jj_scan_token(ID))
			return true;
		return false;
	}

	private boolean jj_3R_127() {
		if (jj_3R_113())
			return true;
		return false;
	}

	private boolean jj_3R_120() {
		if (jj_scan_token(TYPEPREFIX))
			return true;
		if (jj_3R_113())
			return true;
		if (jj_3R_184())
			return true;
		return false;
	}

	private boolean jj_3R_59() {
		if (jj_scan_token(LONG))
			return true;
		if (jj_scan_token(DOUBLE))
			return true;
		return false;
	}

	private boolean jj_3R_237() {
		if (jj_3R_113())
			return true;
		return false;
	}

	private boolean jj_3R_236() {
		if (jj_3R_123())
			return true;
		return false;
	}

	private boolean jj_3R_52() {
		if (jj_scan_token(ID))
			return true;
		return false;
	}

	private boolean jj_3R_235() {
		if (jj_3R_162())
			return true;
		return false;
	}

	private boolean jj_3R_153() {
		if (jj_scan_token(80))
			return true;
		if (jj_3R_95())
			return true;
		return false;
	}

	private boolean jj_3R_234() {
		if (jj_3R_160())
			return true;
		return false;
	}

	private boolean jj_3R_58() {
		if (jj_scan_token(DOUBLE))
			return true;
		return false;
	}

	private boolean jj_3R_233() {
		if (jj_3R_36())
			return true;
		return false;
	}

	private boolean jj_3R_260() {
		if (jj_3R_265())
			return true;
		return false;
	}

	private boolean jj_3R_129() {
		if (jj_scan_token(SUPPORTS))
			return true;
		if (jj_3R_95())
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_153()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	private boolean jj_3R_119() {
		if (jj_scan_token(TYPEID))
			return true;
		if (jj_3R_113())
			return true;
		if (jj_3R_184())
			return true;
		return false;
	}

	private boolean jj_3R_224() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_233()) {
			jj_scanpos = xsp;
			if (jj_3R_234()) {
				jj_scanpos = xsp;
				if (jj_3R_235()) {
					jj_scanpos = xsp;
					if (jj_3R_236()) {
						jj_scanpos = xsp;
						if (jj_3R_237())
							return true;
					}
				}
			}
		}
		return false;
	}

	private boolean jj_3R_57() {
		if (jj_scan_token(FLOAT))
			return true;
		return false;
	}

	private boolean jj_3R_254() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_260())
			jj_scanpos = xsp;
		if (jj_3R_261())
			return true;
		return false;
	}

	private boolean jj_3R_91() {
		if (jj_3R_83())
			return true;
		return false;
	}

	private boolean jj_3R_128() {
		if (jj_scan_token(80))
			return true;
		if (jj_3R_127())
			return true;
		return false;
	}

	private boolean jj_3R_37() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_57()) {
			jj_scanpos = xsp;
			if (jj_3R_58()) {
				jj_scanpos = xsp;
				if (jj_3R_59())
					return true;
			}
		}
		return false;
	}

	private boolean jj_3R_63() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(60))
			jj_scanpos = xsp;
		if (jj_scan_token(EVENTTYPE))
			return true;
		if (jj_3R_62())
			return true;
		xsp = jj_scanpos;
		if (jj_3R_76())
			jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3R_83() {
		if (jj_scan_token(79))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(15))
			jj_scanpos = xsp;
		if (jj_3R_127())
			return true;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_128()) {
				jj_scanpos = xsp;
				break;
			}
		}
		xsp = jj_scanpos;
		if (jj_3R_129())
			jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3R_177() {
		if (jj_3R_202())
			return true;
		return false;
	}

	private boolean jj_3R_45() {
		if (jj_3R_63())
			return true;
		if (jj_scan_token(77))
			return true;
		return false;
	}

	private boolean jj_3R_38() {
		if (jj_3R_60())
			return true;
		return false;
	}

	private boolean jj_3R_51() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(60))
			jj_scanpos = xsp;
		if (jj_scan_token(VALUETYPE))
			return true;
		if (jj_3R_62())
			return true;
		xsp = jj_scanpos;
		if (jj_3R_70())
			jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3R_90() {
		if (jj_3R_112())
			return true;
		return false;
	}

	private boolean jj_3R_116() {
		if (jj_scan_token(EXCEPTION))
			return true;
		if (jj_3R_52())
			return true;
		if (jj_scan_token(77))
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_177()) {
				jj_scanpos = xsp;
				break;
			}
		}
		if (jj_scan_token(78))
			return true;
		return false;
	}

	private boolean jj_3R_64() {
		if (jj_scan_token(ABSTRACT))
			return true;
		if (jj_scan_token(EVENTTYPE))
			return true;
		if (jj_3R_62())
			return true;
		return false;
	}

	private boolean jj_3R_264() {
		if (jj_scan_token(94))
			return true;
		return false;
	}

	private boolean jj_3R_33() {
		if (jj_3R_51())
			return true;
		if (jj_scan_token(77))
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_90()) {
				jj_scanpos = xsp;
				break;
			}
		}
		if (jj_scan_token(78))
			return true;
		return false;
	}

	private boolean jj_3R_263() {
		if (jj_scan_token(93))
			return true;
		return false;
	}

	private boolean jj_3R_61() {
		if (jj_scan_token(SWITCH))
			return true;
		if (jj_scan_token(82))
			return true;
		if (jj_3R_224())
			return true;
		if (jj_scan_token(83))
			return true;
		if (jj_scan_token(77))
			return true;
		if (jj_3R_225())
			return true;
		if (jj_scan_token(78))
			return true;
		return false;
	}

	private boolean jj_3R_262() {
		if (jj_scan_token(92))
			return true;
		return false;
	}

	private boolean jj_3R_179() {
		if (jj_3R_52())
			return true;
		return false;
	}

	private boolean jj_3R_92() {
		if (jj_3R_82())
			return true;
		return false;
	}

	private boolean jj_3R_255() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_262()) {
			jj_scanpos = xsp;
			if (jj_3R_263()) {
				jj_scanpos = xsp;
				if (jj_3R_264())
					return true;
			}
		}
		if (jj_3R_249())
			return true;
		return false;
	}

	private boolean jj_3R_54() {
		if (jj_scan_token(ABSTRACT))
			return true;
		if (jj_scan_token(VALUETYPE))
			return true;
		if (jj_3R_62())
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_91())
			jj_scanpos = xsp;
		if (jj_scan_token(77))
			return true;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_92()) {
				jj_scanpos = xsp;
				break;
			}
		}
		if (jj_scan_token(78))
			return true;
		return false;
	}

	private boolean jj_3_1() {
		if (jj_3R_30())
			return true;
		return false;
	}

	private boolean jj_3R_46() {
		if (jj_3R_64())
			return true;
		return false;
	}

	private boolean jj_3_16() {
		if (jj_3R_45())
			return true;
		return false;
	}

	private boolean jj_3R_249() {
		if (jj_3R_254())
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_255())
			jj_scanpos = xsp;
		return false;
	}

	private boolean jj_3_17() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_16()) {
			jj_scanpos = xsp;
			if (jj_3R_46())
				return true;
		}
		return false;
	}

	private boolean jj_3R_213() {
		if (jj_3R_179())
			return true;
		return false;
	}

	private boolean jj_3_9() {
		if (jj_3R_38())
			return true;
		return false;
	}

	private boolean jj_3R_180() {
		if (jj_scan_token(80))
			return true;
		if (jj_3R_179())
			return true;
		return false;
	}

	private boolean jj_3R_187() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_9()) {
			jj_scanpos = xsp;
			if (jj_3R_213())
				return true;
		}
		return false;
	}

	private boolean jj_3R_186() {
		if (jj_3R_212())
			return true;
		return false;
	}

	private boolean jj_3_14() {
		if (jj_3R_43())
			return true;
		return false;
	}

	private boolean jj_3_2() {
		if (jj_3R_31())
			return true;
		return false;
	}

	private boolean jj_3R_34() {
		if (jj_scan_token(VALUETYPE))
			return true;
		if (jj_3R_52())
			return true;
		if (jj_3R_53())
			return true;
		return false;
	}

	private boolean jj_3R_155() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_14()) {
			jj_scanpos = xsp;
			if (jj_3R_186())
				return true;
		}
		return false;
	}

	private boolean jj_3R_188() {
		if (jj_scan_token(80))
			return true;
		if (jj_3R_187())
			return true;
		return false;
	}

	private boolean jj_3R_185() {
		if (jj_3R_211())
			return true;
		return false;
	}

	private boolean jj_3R_77() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_scan_token(11))
			jj_scanpos = xsp;
		if (jj_scan_token(VALUETYPE))
			return true;
		if (jj_3R_62())
			return true;
		return false;
	}

	private boolean jj_3_13() {
		if (jj_3R_42())
			return true;
		return false;
	}

	private boolean jj_3R_154() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_13()) {
			jj_scanpos = xsp;
			if (jj_3R_185())
				return true;
		}
		return false;
	}

	private boolean jj_3R_257() {
		if (jj_scan_token(91))
			return true;
		return false;
	}

	private boolean jj_3R_171() {
		if (jj_3R_187())
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_188()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	/** Generated Token Manager. */
	public IDLParserTokenManager token_source;
	JavaCharStream jj_input_stream;
	/** Current token. */
	public Token token;
	/** Next token. */
	public Token jj_nt;
	private Token jj_scanpos, jj_lastpos;
	private int jj_la;
	private int jj_gen;
	final private int[] jj_la1 = new int[122];
	static private int[] jj_la1_0;
	static private int[] jj_la1_1;
	static private int[] jj_la1_2;
	static private int[] jj_la1_3;
	static {
		jj_la1_init_0();
		jj_la1_init_1();
		jj_la1_init_2();
		jj_la1_init_3();
	}

	private static void jj_la1_init_0() {
		jj_la1_0 = new int[] { 0x4ad41800, 0x4ad41800, 0x8000800, 0x501000, 0x4a000800, 0x4ad41800, 0x840800, 0x800800, 0x800800, 0x800800, 0x800800, 0x0,
			0x56711000, 0x56711000, 0x0, 0x0, 0x0, 0x800, 0x800, 0x800, 0x800, 0x0, 0x56711000, 0x56791000, 0x0, 0x0, 0x8000, 0x0, 0x0, 0x0, 0x56791000,
			0x80000, 0x0, 0x20000000, 0x0, 0x14000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x500000, 0x14410000, 0x14010000,
			0x14010000, 0x0, 0x400000, 0x0, 0x0, 0x10000000, 0x10000000, 0x10000000, 0x0, 0x14410000, 0x14400000, 0x80000000, 0x80000000, 0x80000000, 0x0, 0x0,
			0x0, 0x0, 0x0, 0x0, 0x0, 0x14410000, 0x0, 0x20000000, 0x0, 0x14010000, 0x0, 0x2000, 0x2000, 0x0, 0x0, 0x14010000, 0x0, 0x0, 0x0, 0x0, 0x20000000,
			0x0, 0x20000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1224000, 0x1224000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x56711000, 0x56711000, 0x0, 0x20000000, 0x0,
			0x20000000, 0x800, 0x8000800, 0x800, 0x0, 0x56711000, 0x56791000, 0x0, 0x0, 0x0, 0x0, };
	}

	private static void jj_la1_init_1() {
		jj_la1_1 = new int[] { 0x34404b02, 0x34404b02, 0x10000000, 0x4004900, 0x30400202, 0x34404b02, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe3b491c, 0xe3b491c, 0x0,
			0x0, 0x0, 0x0, 0x400000, 0x400000, 0x0, 0x0, 0xe3b491c, 0xe3b491d, 0x10000000, 0x0, 0x0, 0x0, 0x0, 0x80000000, 0xe3b491d, 0x0, 0x0, 0x0, 0x0,
			0x388010, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x20, 0x20, 0x4000900, 0x43b9118, 0x3b9018, 0x130018, 0x209000, 0x4000100,
			0x0, 0x0, 0x80000, 0x10008, 0x10000, 0x8, 0x43b9118, 0x10018, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4, 0x0, 0x43b9118, 0x2000000, 0x0, 0x800000,
			0x83b0018, 0x0, 0x40000000, 0x40000000, 0x0, 0x0, 0x3b0018, 0x4000000, 0x100, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x1000080, 0x0, 0x200, 0x0, 0x80000000,
			0x0, 0x42004, 0x42004, 0x0, 0x40, 0x0, 0x80000000, 0x0, 0xe3b4d1d, 0xe3b4d1d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe3b491c, 0xe3b491d,
			0x10000000, 0x0, 0x0, 0x0, };
	}

	private static void jj_la1_init_2() {
		jj_la1_2 = new int[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8000, 0x20441, 0x20441, 0x10000, 0x20000, 0x20000, 0x0, 0x0, 0x0, 0x0,
			0x8000, 0x20441, 0x20541, 0x0, 0x8000, 0x0, 0x10000, 0x10000, 0x0, 0x20541, 0x100, 0x80, 0x0, 0x10000, 0x20061, 0x200000, 0x400000, 0x800000,
			0x3000000, 0x3000000, 0xc000000, 0xc000000, 0x70000000, 0x70000000, 0x8c000000, 0x8c000000, 0x60200, 0x200, 0x200, 0x0, 0x20461, 0x20461, 0x401,
			0x20, 0x0, 0x10000, 0x0, 0x40, 0x0, 0x0, 0x0, 0x20461, 0x20000, 0x2, 0x2, 0x2, 0x10000, 0x10000, 0x0, 0x0, 0x0, 0x0, 0x10000, 0x20461, 0x0, 0x0,
			0x0, 0x20441, 0x10000, 0x80, 0x80, 0x10000, 0x10000, 0x20441, 0x0, 0x0, 0x20000, 0x10000, 0x0, 0x10000, 0x0, 0x0, 0x0, 0x10000, 0x0, 0x8000, 0x0,
			0x10000, 0x0, 0x0, 0x20400, 0x0, 0x8000, 0x0, 0x8, 0x20441, 0x20441, 0x80, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x8000, 0x20441, 0x20541, 0x0, 0x8000,
			0x0, 0x0, };
	}

	private static void jj_la1_init_3() {
		jj_la1_3 = new int[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x10, 0x0,
			0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7ff0, 0x7fe0, 0x0, 0x0, 0x10,
			0x10, 0x0, 0x0, 0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0, 0x10, 0x10, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x4, 0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0x10, 0x0,
			0x0, 0x0, 0x0, 0x0, 0x10, 0x0, 0x0, 0x2010, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0x0, 0x10, 0x10,
			0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x10, 0x0, 0x0, 0x160, 0x600, };
	}

	final private JJCalls[] jj_2_rtns = new JJCalls[17];
	private boolean jj_rescan = false;
	private int jj_gc = 0;

	/** Constructor with InputStream. */
	public IDLParser(java.io.InputStream stream) {
		this(stream, null);
	}

	/** Constructor with InputStream and supplied encoding */
	public IDLParser(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream = new JavaCharStream(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source = new IDLParserTokenManager(jj_input_stream);
		token = new Token();
		token.next = jj_nt = token_source.getNextToken();
		jj_gen = 0;
		for (int i = 0; i < 122; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream) {
		ReInit(stream, null);
	}

	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream.ReInit(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source.ReInit(jj_input_stream);
		token = new Token();
		token.next = jj_nt = token_source.getNextToken();
		jj_gen = 0;
		for (int i = 0; i < 122; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Constructor. */
	public IDLParser(java.io.Reader stream) {
		jj_input_stream = new JavaCharStream(stream, 1, 1);
		token_source = new IDLParserTokenManager(jj_input_stream);
		token = new Token();
		token.next = jj_nt = token_source.getNextToken();
		jj_gen = 0;
		for (int i = 0; i < 122; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Reinitialise. */
	public void ReInit(java.io.Reader stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		token.next = jj_nt = token_source.getNextToken();
		jj_gen = 0;
		for (int i = 0; i < 122; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Constructor with generated Token Manager. */
	public IDLParser(IDLParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		token.next = jj_nt = token_source.getNextToken();
		jj_gen = 0;
		for (int i = 0; i < 122; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Reinitialise. */
	public void ReInit(IDLParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		token.next = jj_nt = token_source.getNextToken();
		jj_gen = 0;
		for (int i = 0; i < 122; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	private Token jj_consume_token(int kind) throws ParseException {
		Token oldToken = token;
		if ((token = jj_nt).next != null)
			jj_nt = jj_nt.next;
		else
			jj_nt = jj_nt.next = token_source.getNextToken();
		if (token.kind == kind) {
			jj_gen++;
			if (++jj_gc > 100) {
				jj_gc = 0;
				for (int i = 0; i < jj_2_rtns.length; i++) {
					JJCalls c = jj_2_rtns[i];
					while (c != null) {
						if (c.gen < jj_gen)
							c.first = null;
						c = c.next;
					}
				}
			}
			return token;
		}
		jj_nt = token;
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}

	@SuppressWarnings("serial")
	static private final class LookaheadSuccess extends java.lang.Error {
	}

	final private LookaheadSuccess jj_ls = new LookaheadSuccess();

	private boolean jj_scan_token(int kind) {
		if (jj_scanpos == jj_lastpos) {
			jj_la--;
			if (jj_scanpos.next == null) {
				jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
			} else {
				jj_lastpos = jj_scanpos = jj_scanpos.next;
			}
		} else {
			jj_scanpos = jj_scanpos.next;
		}
		if (jj_rescan) {
			int i = 0;
			Token tok = token;
			while (tok != null && tok != jj_scanpos) {
				i++;
				tok = tok.next;
			}
			if (tok != null)
				jj_add_error_token(kind, i);
		}
		if (jj_scanpos.kind != kind)
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			throw jj_ls;
		return false;
	}

	/** Get the next Token. */
	final public Token getNextToken() {
		if ((token = jj_nt).next != null)
			jj_nt = jj_nt.next;
		else
			jj_nt = jj_nt.next = token_source.getNextToken();
		jj_gen++;
		return token;
	}

	/** Get the specific Token. */
	final public Token getToken(int index) {
		Token t = token;
		for (int i = 0; i < index; i++) {
			if (t.next != null)
				t = t.next;
			else
				t = t.next = token_source.getNextToken();
		}
		return t;
	}

	private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
	private int[] jj_expentry;
	private int jj_kind = -1;
	private int[] jj_lasttokens = new int[100];
	private int jj_endpos;

	private void jj_add_error_token(int kind, int pos) {
		if (pos >= 100)
			return;
		if (pos == jj_endpos + 1) {
			jj_lasttokens[jj_endpos++] = kind;
		} else if (jj_endpos != 0) {
			jj_expentry = new int[jj_endpos];
			for (int i = 0; i < jj_endpos; i++) {
				jj_expentry[i] = jj_lasttokens[i];
			}
			jj_entries_loop: for (java.util.Iterator< ? > it = jj_expentries.iterator(); it.hasNext();) {
				int[] oldentry = (int[]) (it.next());
				if (oldentry.length == jj_expentry.length) {
					for (int i = 0; i < jj_expentry.length; i++) {
						if (oldentry[i] != jj_expentry[i]) {
							continue jj_entries_loop;
						}
					}
					jj_expentries.add(jj_expentry);
					break jj_entries_loop;
				}
			}
			if (pos != 0)
				jj_lasttokens[(jj_endpos = pos) - 1] = kind;
		}
	}

	/** Generate ParseException. */
	public ParseException generateParseException() {
		jj_expentries.clear();
		boolean[] la1tokens = new boolean[111];
		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 122; i++) {
			if (jj_la1[i] == jj_gen) {
				for (int j = 0; j < 32; j++) {
					if ((jj_la1_0[i] & (1 << j)) != 0) {
						la1tokens[j] = true;
					}
					if ((jj_la1_1[i] & (1 << j)) != 0) {
						la1tokens[32 + j] = true;
					}
					if ((jj_la1_2[i] & (1 << j)) != 0) {
						la1tokens[64 + j] = true;
					}
					if ((jj_la1_3[i] & (1 << j)) != 0) {
						la1tokens[96 + j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 111; i++) {
			if (la1tokens[i]) {
				jj_expentry = new int[1];
				jj_expentry[0] = i;
				jj_expentries.add(jj_expentry);
			}
		}
		jj_endpos = 0;
		jj_rescan_token();
		jj_add_error_token(0, 0);
		int[][] exptokseq = new int[jj_expentries.size()][];
		for (int i = 0; i < jj_expentries.size(); i++) {
			exptokseq[i] = jj_expentries.get(i);
		}
		return new ParseException(token, exptokseq, tokenImage);
	}

	/** Enable tracing. */
	final public void enable_tracing() {
	}

	/** Disable tracing. */
	final public void disable_tracing() {
	}

	private void jj_rescan_token() {
		jj_rescan = true;
		for (int i = 0; i < 17; i++) {
			try {
				JJCalls p = jj_2_rtns[i];
				do {
					if (p.gen > jj_gen) {
						jj_la = p.arg;
						jj_lastpos = jj_scanpos = p.first;
						switch (i) {
						case 0:
							jj_3_1();
							break;
						case 1:
							jj_3_2();
							break;
						case 2:
							jj_3_3();
							break;
						case 3:
							jj_3_4();
							break;
						case 4:
							jj_3_5();
							break;
						case 5:
							jj_3_6();
							break;
						case 6:
							jj_3_7();
							break;
						case 7:
							jj_3_8();
							break;
						case 8:
							jj_3_9();
							break;
						case 9:
							jj_3_10();
							break;
						case 10:
							jj_3_11();
							break;
						case 11:
							jj_3_12();
							break;
						case 12:
							jj_3_13();
							break;
						case 13:
							jj_3_14();
							break;
						case 14:
							jj_3_15();
							break;
						case 15:
							jj_3_16();
							break;
						case 16:
							jj_3_17();
							break;
						}
					}
					p = p.next;
				} while (p != null);
			} catch (LookaheadSuccess ls) {
			}
		}
		jj_rescan = false;
	}

	private void jj_save(int index, int xla) {
		JJCalls p = jj_2_rtns[index];
		while (p.gen > jj_gen) {
			if (p.next == null) {
				p = p.next = new JJCalls();
				break;
			}
			p = p.next;
		}
		p.gen = jj_gen + xla - jj_la;
		p.first = token;
		p.arg = xla;
	}

	static final class JJCalls {
		int gen;
		Token first;
		int arg;
		JJCalls next;
	}

}
